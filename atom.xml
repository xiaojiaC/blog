<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Oh_null&#39;s blog</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://xiaojiac.github.io/blog/"/>
  <updated>2023-12-29T07:52:06.644Z</updated>
  <id>http://xiaojiac.github.io/blog/</id>
  
  <author>
    <name>xiaojiaC</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring ResolvableType</title>
    <link href="http://xiaojiac.github.io/blog/Spring%20ResolvableType.html"/>
    <id>http://xiaojiac.github.io/blog/Spring%20ResolvableType.html</id>
    <published>2023-11-12T12:22:23.000Z</published>
    <updated>2023-12-29T07:52:06.644Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-ResolvableType"><a href="#Spring-ResolvableType" class="headerlink" title="Spring ResolvableType"></a>Spring ResolvableType</h2><h3 id="类型概念"><a href="#类型概念" class="headerlink" title="类型概念"></a>类型概念</h3><p>在 JDK1.5 之前所有的原始类型都通过字节码文件类<code>Class</code>进行抽象。<code>Class</code>类的一个具体对象就代表一个指定的原始类型。从 JDK1.5 加入了泛型类，扩充了数据类型，在 <em>原始类型</em> 基础上扩充了 _类型变量<em>、</em>通配符类型<em>、</em>参数化类型<em>、</em>泛型数组类型_。<code>Type</code>是 Java 语言中所有类型（<code>Class</code>）的公共父接口。</p><img src="/blog/Spring%20ResolvableType/Type.png" class=""><ul><li>类型变量（<code>TypeVariable</code>）：是各种类型变量的公共父接口，就是泛型里面的类似<code>T</code>、<code>E</code>。 例如：<code>List&lt;T&gt;</code>中的<code>T</code>类型。</li><li>通配符类型（<code>WildcardType</code>）：又叫泛型表达式类型。例如：<code>List&lt;?&gt;</code>中的<code>?</code>，<code>List&lt;? extends Number&gt;</code>中的<code>? extends Number</code>或<code>Set&lt;? super Integer&gt;</code>中的<code>? super Integer</code>。</li><li>参数化类型（<code>ParameterizedType</code>）：泛型类型。例如：<code>List&lt;E&gt;</code>、<code>Map&lt;K, V&gt;</code>、<code>List&lt;? extends Number&gt;</code>带有类型参数的类型。<ul><li>注意：<code>TypeVariable</code>代表着泛型中的变量，而<code>ParameterizedType</code>则代表整个泛型。</li></ul></li><li>泛型数组类型（<code>GenericArrayType</code>）：并不是我们平常所使用的数组<code>String[]</code> 、<code>byte[]</code>。而是带有泛型的数组，例如：<code>T[]</code>。</li><li>原始类型（<code>Class</code>）：不仅包括我们平常所指的类、枚举、数组、注解，还包括 8 种基本类型（<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>、<code>float</code>、<code>double</code>、<code>char</code>和<code>boolean</code>）。</li></ul><a id="more"></a><h4 id="TypeVariable"><a href="#TypeVariable" class="headerlink" title="TypeVariable"></a><code>TypeVariable</code></h4><p>表示类型变量，它是各种类型变量的公共父接口。</p><ul><li><code>Type[] getBounds()</code>：获取此类型变量的上边界类型数组，若无显示定义<code>extends</code>，默认为<code>Object</code>（类型变量的上边界可能不止一个，因为可以用<code>&amp;</code>符号限定多个。这其中有且只能有一个为类或抽象类，且必须放在<code>extends</code>后的第一个位置，也就是说若有多个上边界，则第一个<code>&amp;</code>之后的必为接口）。例如：<code>Map&lt;K extends Number, V&gt;</code>类型中的<code>K</code>类型的上边界是<code>Number</code>，<code>V</code>类型的上边界是<code>Object</code>。</li><li><code>D getGenericDeclaration()</code>：获取声明此类型变量的类类型。</li><li><code>String getName()</code>：获取此类型变量的名称。例如: <code>Map&lt;K,V&gt;</code>类型中的<code>K</code>、<code>V</code>之类的名称。</li><li><code>AnnotatedType[] getAnnotatedBounds()</code>：获取此注解类型变量的上边界注解类型数组。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeVariableTest</span>&lt;<span class="title">K</span> <span class="keyword">extends</span> <span class="title">Number</span>, <span class="title">V</span>, <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Deprecated</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Output：</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * K</span></span><br><span class="line"><span class="comment">     * [class java.lang.Number]</span></span><br><span class="line"><span class="comment">     * [sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl@254989ff]</span></span><br><span class="line"><span class="comment">     * class java.lang.Number</span></span><br><span class="line"><span class="comment">     * class com.xxx.java.type.TypeVariableTest</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * V</span></span><br><span class="line"><span class="comment">     * [class java.lang.Object]</span></span><br><span class="line"><span class="comment">     * [sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl@5d099f62]</span></span><br><span class="line"><span class="comment">     * class java.lang.Object</span></span><br><span class="line"><span class="comment">     * class com.xxx.java.type.TypeVariableTest</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * A</span></span><br><span class="line"><span class="comment">     * [interface java.lang.Deprecated]</span></span><br><span class="line"><span class="comment">     * [sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl@37f8bb67]</span></span><br><span class="line"><span class="comment">     * interface java.lang.Deprecated</span></span><br><span class="line"><span class="comment">     * class com.xxx.java.type.TypeVariableTest</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TypeVariable&lt;Class&lt;TypeVariableTest&gt;&gt;[] typeParameters = TypeVariableTest<span class="class">.<span class="keyword">class</span>.<span class="title">getTypeParameters</span>()</span>;</span><br><span class="line">        <span class="keyword">for</span> (TypeVariable&lt;Class&lt;TypeVariableTest&gt;&gt; typeVar : typeParameters) &#123;</span><br><span class="line">            System.out.println(typeVar.getName());</span><br><span class="line">            System.out.println(Arrays.toString(typeVar.getBounds()));</span><br><span class="line">            System.out.println(Arrays.toString(typeVar.getAnnotatedBounds()));</span><br><span class="line">            <span class="keyword">for</span> (AnnotatedType annotatedBound : typeVar.getAnnotatedBounds()) &#123;</span><br><span class="line">                System.out.println(Arrays.toString(annotatedBound.getAnnotations()));</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(typeVar.getGenericDeclaration());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="WildcardType"><a href="#WildcardType" class="headerlink" title="WildcardType"></a><code>WildcardType</code></h4><p>表示一个通配符类型表达式，如：<code>?</code>、<code>? extends Number</code> 或 <code>? super Integer</code>。</p><ul><li><code>Type[] getUpperBounds()</code>：获取泛型通配符的上边界类型数组。例如：<code>? extends Number</code>上边界为<code>Number</code>类型。</li><li><code>Type[] getLowerBounds()</code>：获取泛型通配符的下边界类型数组。例如：<code>? super Integer</code>下边界为<code>Integer</code>类型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WildcardTypeTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;? extends Number, ? <span class="keyword">super</span> Integer&gt; users;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field field = WildcardTypeTest.class.getDeclaredField("users");</span><br><span class="line">        ParameterizedType parameterizedType = (ParameterizedType) field.getGenericType();</span><br><span class="line">        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();</span><br><span class="line">        WildcardType wildcardType0 = (WildcardType) actualTypeArguments[<span class="number">0</span>];</span><br><span class="line">        System.out.println(Arrays.toString(wildcardType0.getUpperBounds())); <span class="comment">// [class java.lang.Number]</span></span><br><span class="line">        System.out.println(Arrays.toString(wildcardType0.getLowerBounds())); <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line">        WildcardType wildcardType1 = (WildcardType) actualTypeArguments[<span class="number">1</span>];</span><br><span class="line">        System.out.println(Arrays.toString(wildcardType1.getUpperBounds())); <span class="comment">// [class java.lang.Object]</span></span><br><span class="line">        System.out.println(Arrays.toString(wildcardType1.getLowerBounds())); <span class="comment">// [class java.lang.Integer]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ParameterizedType"><a href="#ParameterizedType" class="headerlink" title="ParameterizedType"></a><code>ParameterizedType</code></h4><p>表示参数化类型，如：<code>Collection&lt;String&gt;</code>。</p><ul><li><code>Type[] getActualTypeArguments()</code>：获取该类型的实际的类型参数数组。例如: <code>Map&lt;K,V&gt;</code>类型中的<code>K</code>、<code>V</code>的类型。</li><li><code>Type getRawType()</code>：获取声明该类型的原始类或接口类型。例如: <code>Map&lt;K,V&gt;</code>类型中的<code>Map</code>类型。</li><li><code>Type getOwnerType()</code>：获取该类型所属的类型（内部类所属的类型），如果此类型为顶层类型，则返回<code>null</code>。例如：<code>Map.Entry&lt;K,V&gt;</code>类型其所有者类型是<code>Map</code>类型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterizedTypeTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Long&gt; userIds;</span><br><span class="line">    Map.Entry&lt;String, Integer&gt; item;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field userIdsField = ParameterizedTypeTest.class.getDeclaredField("userIds");</span><br><span class="line">        ParameterizedType type = (ParameterizedType) userIdsField.getGenericType();</span><br><span class="line">        System.out.println(type.getActualTypeArguments()[<span class="number">0</span>] + <span class="string">","</span> + type.getActualTypeArguments()[<span class="number">1</span>]); <span class="comment">// class java.lang.String,class java.lang.Long</span></span><br><span class="line">        System.out.println(type.getRawType()); <span class="comment">// interface java.util.Map</span></span><br><span class="line">        System.out.println(type.getOwnerType()); <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line">        Field itemField = ParameterizedTypeTest.class.getDeclaredField("item");</span><br><span class="line">        type = (ParameterizedType) itemField.getGenericType();</span><br><span class="line">        System.out.println(type.getActualTypeArguments()[<span class="number">0</span>] + <span class="string">","</span> + type.getActualTypeArguments()[<span class="number">1</span>]); <span class="comment">// class java.lang.String,class java.lang.Integer</span></span><br><span class="line">        System.out.println(type.getRawType()); <span class="comment">// interface java.util.Map$Entry</span></span><br><span class="line">        System.out.println(type.getOwnerType()); <span class="comment">// interface java.util.Map</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="GenericArrayType"><a href="#GenericArrayType" class="headerlink" title="GenericArrayType"></a><code>GenericArrayType</code></h4><p>表示一种数组类型，其元素类型为参数化类型或类型变量。</p><ul><li><code>Type getGenericComponentType()</code>：获取泛型数组中元素的类型。例如：<code>T[]</code>数组的元素类型为<code>T</code>类型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericArrayTypeTest</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    T[][] elements;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field field = GenericArrayTypeTest.class.getDeclaredField("elements");</span><br><span class="line">        GenericArrayType twoDimArrayType = (GenericArrayType) field.getGenericType();</span><br><span class="line">        GenericArrayType oneDimArrayType = (GenericArrayType) twoDimArrayType.getGenericComponentType();</span><br><span class="line">        System.out.println(oneDimArrayType); <span class="comment">// T[]</span></span><br><span class="line">        System.out.println(oneDimArrayType.getGenericComponentType()); <span class="comment">// T</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Class"><a href="#Class" class="headerlink" title="Class"></a><code>Class</code></h4><ul><li><code>Type[] getGenericInterfaces()</code>：返回类实例的接口的泛型类型数组。</li><li><code>Type getGenericSuperclass()</code>：返回类实例的直接父类的泛型类型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(HashMap<span class="class">.<span class="keyword">class</span>.<span class="title">getGenericSuperclass</span>())</span>; <span class="comment">// java.util.AbstractMap&lt;K, V&gt;</span></span><br><span class="line">    System.out.println(Arrays.toString(HashMap<span class="class">.<span class="keyword">class</span>.<span class="title">getGenericInterfaces</span>()))</span>; <span class="comment">// [java.util.Map&lt;K, V&gt;, interface java.lang.Cloneable, interface java.io.Serializable]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Type的作用"><a href="#Type的作用" class="headerlink" title="Type的作用"></a><code>Type</code>的作用</h4><p>泛型擦除的原因以及 Java 中<code>Type</code>的作用？</p><p>其实在 JDK1.5 之前 Java 中只有原始类型而没有泛型类型，而在 JDK1.5 之后引入泛型，但是这种泛型仅仅存在于编译阶段，<strong>当在 JVM 运行的过程中，与泛型相关的信息将会被擦除</strong>，如<code>List&lt;Integer&gt;</code>与<code>List&lt;? extends Number&gt;</code>都将会在运行时被擦除成为<code>List</code>这个类型。而类型擦除机制存在的原因正是因为如果在运行时存在泛型，那么将要修改 JVM 指令集，这是非常致命的。</p><p>此外，原始类型会生成字节码文件对象，而泛型类型相关的类型并不会生成与其相对应的字节码文件（因为泛型类型将会被擦除），因此无法将泛型相关的新类型与<code>Class</code>相统一。因此，为了程序的扩展性以及为了开发需要去反射操作这些类型，就引入了<code>Type</code>这个类型，并且新增了<code>ParameterizedType</code>、<code>TypeVariable</code>、<code>GenericArrayType</code>、<code>WildcardType</code>四个表示泛型相关的类型，再加上原始类型<code>Class</code>，这样就可以用<code>Type</code>类型的参数来统一表示接收以上五种子类的实参或者返回值类型就是<code>Type</code>类型的参数。统一了与泛型有关的类型和原始类型<code>Class</code>，而且这样一来，我们也可以通过反射获取泛型类型参数。</p><h3 id="ResolvableType"><a href="#ResolvableType" class="headerlink" title="ResolvableType"></a><code>ResolvableType</code></h3><p>为了简化对泛型信息的获取，Spring4 开始提供了一个<code>ResolvableType</code>，允许你将类、接口和参数类型解析为一种可操作的形式，以便在运行时动态地创建对象、获取类型信息以及进行其他相关的操作。</p><h4 id="如何创建"><a href="#如何创建" class="headerlink" title="如何创建"></a>如何创建</h4><p>使用 ResolvableType，需要先获取其实例，泛型类型可以存在于类、成员变量、构造器参数、成员方法参数、方法返回值，对应于这些泛型类型可以存在的位置，ResolvableType 提供了一些将这些泛型类型信息转换为 ResolvableType 的静态方法，常见的方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResolvableType</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据原始类型Class创建。使用完整的泛型类型信息进行可分配性检查，例如：ResolvableType.forClass(MyArrayList.class)。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResolvableType <span class="title">forClass</span><span class="params">(@Nullable Class&lt;?&gt; clazz)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据原始类型信息创建。仅对原始类进行可分配性检查（类似于Class.isAssignableFrom）它用作包装器，例如：ResolvableType.forRawClass(List.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResolvableType <span class="title">forRawClass</span><span class="params">(@Nullable Class&lt;?&gt; clazz)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据某一种类型创建。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResolvableType <span class="title">forType</span><span class="params">(@Nullable Type type)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据成员变量创建</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResolvableType <span class="title">forField</span><span class="params">(Field field)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据构造器参数创建</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResolvableType <span class="title">forConstructorParameter</span><span class="params">(Constructor&lt;?&gt; constructor, <span class="keyword">int</span> parameterIndex)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据实例创建。该实例不传递泛型信息，但如果它实现了ResolvableTypeProvider，则可以使用更精确的ResolvableType</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResolvableType <span class="title">forInstance</span><span class="params">(Object instance)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据方法参数创建</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResolvableType <span class="title">forMethodParameter</span><span class="params">(Method method, <span class="keyword">int</span> parameterIndex)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据方法的返回值创建</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResolvableType <span class="title">forMethodReturnType</span><span class="params">(Method method)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><p>ResolvableType 定义了一些方法可以用于获取泛型信息，具体如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResolvableType</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取泛型数组的元素类型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResolvableType <span class="title">getComponentType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取类型继承的直接父类型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResolvableType <span class="title">getSuperType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取类型实现的直接接口类型</span></span><br><span class="line"><span class="keyword">public</span> ResolvableType[] getInterfaces();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取底层Java Class原始类型</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; getRawClass();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取底层Java Type类型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Type <span class="title">getType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取泛型的实际类型，索引位置从0开始</span></span><br><span class="line"><span class="comment">// 例如：给定类型 Map&lt;String, List&lt;Integer&gt;&gt;，getGeneric(0)将得到String；getGeneric(1, 0)将得到Integer</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResolvableType <span class="title">getGeneric</span><span class="params">(@Nullable <span class="keyword">int</span>... indexes)</span></span>;</span><br><span class="line"><span class="keyword">public</span> ResolvableType[] getGenerics();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取指定嵌套级别的类型，嵌套级别从1开始。</span></span><br><span class="line">    <span class="comment">// 嵌套级别是指应该返回的具体泛型参数。嵌套级别为1表示此类型；为2表示第一个嵌套泛型；为3表示第二个；以此类推</span></span><br><span class="line">    <span class="comment">// 例如：给定类型 List&lt;Set&lt;Integer&gt;&gt;，级别1指的是 List，级别2指的是 Set，级别3指的是 Integer。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResolvableType <span class="title">getNested</span><span class="params">(<span class="keyword">int</span> nestingLevel)</span></span>;</span><br><span class="line">    <span class="comment">// typeIndexesPerLevel Map可用于引用给定级别的特定泛型。</span></span><br><span class="line">    <span class="comment">// 例如：给定Map&lt;K,V&gt; 索引0表示K；而1表示V；如果参数Map不包含特定级别的值，则将使用最后一个泛型类型（例如V）。</span></span><br><span class="line"><span class="comment">// 例如：给定类型 Map&lt;String, List&lt;Integer&gt;&gt;， getNested(2, &#123;2, 0&#125;)将得到String；getNested(2, &#123;2, 1&#125;)将得到List&lt;Integer&gt;；getNested(3, &#123;3, 0&#125;)将得到Integer</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResolvableType <span class="title">getNested</span><span class="params">(<span class="keyword">int</span> nestingLevel, @Nullable Map&lt;Integer, Integer&gt; typeIndexesPerLevel)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前实例是否包含泛型参数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasGenerics</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前实例是否为数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isArray</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前实例是否为给定参数的类型或父类型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAssignableFrom</span><span class="params">(Class&lt;?&gt; other)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAssignableFrom</span><span class="params">(ResolvableType other)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将此类型解析为Class，如果无法解析该类型，则返回null。如果直接解析失败，此方法将考虑 TypeVariables 和 WildcardTypes 的边界；但是Object.class 的边界将被忽略。</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; resolve();</span><br><span class="line">    <span class="comment">// 将特定泛型参数解析为Class</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; resolveGeneric(<span class="keyword">int</span>... indexes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现分析"><a href="#实现分析" class="headerlink" title="实现分析"></a>实现分析</h4><p>基于以下示例，对<code>ResolvableType#getNested</code>方法进行分析，了解其实现后即类通其中大多数方法的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResolvableTypeTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, List&lt;Integer&gt;&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Field field = ReflectionUtils.findField(ResolvableTypeTest.class, "map");</span><br><span class="line">        ResolvableType type = ResolvableType.forField(field);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取嵌套级别1的类型，使用默认索引</span></span><br><span class="line">        ResolvableType nestedType1 = type.getNested(<span class="number">1</span>);</span><br><span class="line">        System.out.println(nestedType1); <span class="comment">// java.util.Map&lt;java.lang.String, java.util.List&lt;java.lang.Integer&gt;&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取嵌套级别2的类型，使用自定义索引，且指定获取级别2的第一个泛型</span></span><br><span class="line">        Map&lt;Integer, Integer&gt; typeIndexes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        typeIndexes.put(<span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">        ResolvableType nestedType2 = type.getNested(<span class="number">2</span>, typeIndexes);</span><br><span class="line">        System.out.println(nestedType2); <span class="comment">// java.lang.String</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行完<code>ResolvableType.forField(field)</code>后，会构造出该字段对应的包装类型<code>ResolvableType</code>，其内核心成员变量已被赋值为：</p><img src="/blog/Spring%20ResolvableType/ResolvableType.png" class=""><figure class="highlight java"><figcaption><span>org.springframework.core.ResolvableType</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResolvableType</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentReferenceHashMap&lt;ResolvableType, ResolvableType&gt; cache =</span><br><span class="line">                <span class="keyword">new</span> ConcurrentReferenceHashMap&lt;&gt;(<span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ResolvableType</span><span class="params">(Type type, @Nullable TypeProvider typeProvider, @Nullable VariableResolver variableResolver)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.type = type;</span><br><span class="line"><span class="keyword">this</span>.typeProvider = typeProvider;</span><br><span class="line"><span class="keyword">this</span>.variableResolver = variableResolver;</span><br><span class="line"><span class="keyword">this</span>.componentType = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">this</span>.hash = calculateHashCode();  <span class="comment">// 按以上属性计算hash</span></span><br><span class="line"><span class="keyword">this</span>.resolved = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">ResolvableType</span><span class="params">(Type type, @Nullable TypeProvider typeProvider,</span></span></span><br><span class="line"><span class="function"><span class="params">@Nullable VariableResolver variableResolver, @Nullable Integer hash)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.type = type;</span><br><span class="line"><span class="keyword">this</span>.typeProvider = typeProvider;</span><br><span class="line"><span class="keyword">this</span>.variableResolver = variableResolver;</span><br><span class="line"><span class="keyword">this</span>.componentType = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">this</span>.hash = hash;</span><br><span class="line"><span class="keyword">this</span>.resolved = resolveClass(); <span class="comment">// 开始解决Class</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt; resolveClass() &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.type == EmptyType.INSTANCE) &#123; <span class="comment">// hacked的空类型直接返回null</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.type <span class="keyword">instanceof</span> Class) &#123; <span class="comment">// Class类型直接返回</span></span><br><span class="line"><span class="keyword">return</span> (Class&lt;?&gt;) <span class="keyword">this</span>.type;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.type <span class="keyword">instanceof</span> GenericArrayType) &#123; <span class="comment">// 泛型数组类型则解析数组元素类型后返回 元素数组类型</span></span><br><span class="line">Class&lt;?&gt; resolvedComponent = getComponentType().resolve();</span><br><span class="line"><span class="keyword">return</span> (resolvedComponent != <span class="keyword">null</span> ? Array.newInstance(resolvedComponent, <span class="number">0</span>).getClass() : <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> resolveType().resolve(); <span class="comment">// 其他则解决类型后返回</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ResolvableType <span class="title">resolveType</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.type <span class="keyword">instanceof</span> ParameterizedType) &#123; <span class="comment">// 参数化类型，获取声明该类型的原始类或接口类型的ResolvableType</span></span><br><span class="line"><span class="keyword">return</span> forType(((ParameterizedType) <span class="keyword">this</span>.type).getRawType(), <span class="keyword">this</span>.variableResolver);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.type <span class="keyword">instanceof</span> WildcardType) &#123; <span class="comment">// 通配符类型</span></span><br><span class="line">Type resolved = resolveBounds(((WildcardType) <span class="keyword">this</span>.type).getUpperBounds()); <span class="comment">// 先获取上边界类型数组第一个元素类型</span></span><br><span class="line"><span class="keyword">if</span> (resolved == <span class="keyword">null</span>) &#123;</span><br><span class="line">resolved = resolveBounds(((WildcardType) <span class="keyword">this</span>.type).getLowerBounds()); <span class="comment">// 再获取下边界类型数组第一个元素类型</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> forType(resolved, <span class="keyword">this</span>.variableResolver); <span class="comment">// 获取边界类型的ResolvableType</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.type <span class="keyword">instanceof</span> TypeVariable) &#123; <span class="comment">// 类型变量类型</span></span><br><span class="line">TypeVariable&lt;?&gt; variable = (TypeVariable&lt;?&gt;) <span class="keyword">this</span>.type;</span><br><span class="line"><span class="comment">// Try default variable resolution</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.variableResolver != <span class="keyword">null</span>) &#123;</span><br><span class="line">ResolvableType resolved = <span class="keyword">this</span>.variableResolver.resolveVariable(variable);</span><br><span class="line"><span class="keyword">if</span> (resolved != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> resolved;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Fallback to bounds</span></span><br><span class="line"><span class="keyword">return</span> forType(resolveBounds(variable.getBounds()), <span class="keyword">this</span>.variableResolver); <span class="comment">// 获取此类型变量的上边界类型数组第一个元素类型的ResolvableType</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> NONE; <span class="comment">// 空类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResolvableType <span class="title">forField</span><span class="params">(Field field)</span> </span>&#123;</span><br><span class="line">        Assert.notNull(field, <span class="string">"Field must not be null"</span>);</span><br><span class="line">        <span class="keyword">return</span> forType(<span class="keyword">null</span>, <span class="keyword">new</span> FieldTypeProvider(field), <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> ResolvableType <span class="title">forType</span><span class="params">(@Nullable Type type, @Nullable TypeProvider typeProvider, @Nullable VariableResolver variableResolver)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 未直接指定类型，根据 TypeProvider 获取类型</span></span><br><span class="line">        <span class="keyword">if</span> (type == <span class="keyword">null</span> &amp;&amp; typeProvider != <span class="keyword">null</span>) &#123;</span><br><span class="line">            type = SerializableTypeWrapper.forTypeProvider(typeProvider);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> NONE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对于简单的类引用直接构建，不需要昂贵的解析，也不值得缓存......</span></span><br><span class="line">        <span class="keyword">if</span> (type <span class="keyword">instanceof</span> Class) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResolvableType(type, typeProvider, variableResolver, (ResolvableType) <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 由于没有专门清理线程，因此访问时清除空条目</span></span><br><span class="line">        cache.purgeUnreferencedEntries();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 其他类型实例化后进行缓存</span></span><br><span class="line">        ResolvableType resultType = <span class="keyword">new</span> ResolvableType(type, typeProvider, variableResolver); <span class="comment">// 初次实例化会计算实例hash（缓存键）</span></span><br><span class="line">        ResolvableType cachedType = cache.get(resultType);</span><br><span class="line">        <span class="keyword">if</span> (cachedType == <span class="keyword">null</span>) &#123;</span><br><span class="line">            cachedType = <span class="keyword">new</span> ResolvableType(type, typeProvider, variableResolver, resultType.hash); <span class="comment">// 再次实例化会尝试解决Class（缓存值）</span></span><br><span class="line">            cache.put(cachedType, cachedType);</span><br><span class="line">        &#125;</span><br><span class="line">        resultType.resolved = cachedType.resolved; <span class="comment">// 已解决的类型(resolved)复制</span></span><br><span class="line">        <span class="keyword">return</span> resultType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>org.springframework.core.SerializableTypeWrapper</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializableTypeWrapper</span> </span>&#123; <span class="comment">// 见名知意</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Class&lt;?&gt;[] SUPPORTED_SERIALIZABLE_TYPES = &#123;</span><br><span class="line">GenericArrayType<span class="class">.<span class="keyword">class</span>, <span class="title">ParameterizedType</span>.<span class="title">class</span>, <span class="title">TypeVariable</span>.<span class="title">class</span>, <span class="title">WildcardType</span>.<span class="title">class</span>&#125;</span>;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Type <span class="title">forTypeProvider</span><span class="params">(TypeProvider provider)</span> </span>&#123;</span><br><span class="line">Type providedType = provider.getType();</span><br><span class="line"><span class="keyword">if</span> (providedType == <span class="keyword">null</span> || providedType <span class="keyword">instanceof</span> Serializable) &#123;</span><br><span class="line"><span class="comment">// 不需要可串行化的类型包装(例如 java.lang.Class)</span></span><br><span class="line"><span class="keyword">return</span> providedType;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (GraalDetector.inImageCode() || !Serializable<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">Class</span>.<span class="title">class</span>)) </span>&#123;</span><br><span class="line"><span class="comment">// Let's skip any wrapping attempts if types are generally not serializable in</span></span><br><span class="line"><span class="comment">// the current runtime environment (even java.lang.Class itself, e.g. on Graal)</span></span><br><span class="line"><span class="keyword">return</span> providedType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取给定TypeProvider的可串行化类型代理...</span></span><br><span class="line">Type cached = cache.get(providedType);</span><br><span class="line"><span class="keyword">if</span> (cached != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> cached;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (Class&lt;?&gt; type : SUPPORTED_SERIALIZABLE_TYPES) &#123;</span><br><span class="line"><span class="keyword">if</span> (type.isInstance(providedType)) &#123;</span><br><span class="line">ClassLoader classLoader = provider.getClass().getClassLoader();</span><br><span class="line">Class&lt;?&gt;[] interfaces = <span class="keyword">new</span> Class&lt;?&gt;[] &#123;type, SerializableTypeProxy<span class="class">.<span class="keyword">class</span>, <span class="title">Serializable</span>.<span class="title">class</span>&#125;</span>;</span><br><span class="line">                <span class="comment">// 生成类型代理，实现以上3个接口，对支持的序列化类型任何返回Type或Type[]的方法进行代理，统一返回ResolvableType</span></span><br><span class="line">InvocationHandler handler = <span class="keyword">new</span> TypeProxyInvocationHandler(provider);</span><br><span class="line">cached = (Type) Proxy.newProxyInstance(classLoader, interfaces, handler);</span><br><span class="line">cache.put(providedType, cached);</span><br><span class="line"><span class="keyword">return</span> cached;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unsupported Type class: "</span> + providedType.getClass().getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">SerializableTypeProxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 返回类型提供程序</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"><span class="function">TypeProvider <span class="title">getTypeProvider</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">TypeProvider</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回（未被代理Serializable）的原始Type</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function">Type <span class="title">getType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回类型的源，如果未知则返回 null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> Object <span class="title">getSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供序列化支持并增强任何返回Type或Type[]的方法。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> TypeProvider provider;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TypeProxyInvocationHandler</span><span class="params">(TypeProvider provider)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.provider = provider;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, @Nullable Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (method.getName().equals(<span class="string">"equals"</span>) &amp;&amp; args != <span class="keyword">null</span>) &#123;</span><br><span class="line">Object other = args[<span class="number">0</span>];</span><br><span class="line">                <span class="comment">// 其实就是看是否也是个代理，是的话先解包装后（((SerializableTypeProxy) type).getTypeProvider().getType()）再比较</span></span><br><span class="line"><span class="keyword">if</span> (other <span class="keyword">instanceof</span> Type) &#123;</span><br><span class="line">other = unwrap((Type) other);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ObjectUtils.nullSafeEquals(<span class="keyword">this</span>.provider.getType(), other);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (method.getName().equals(<span class="string">"hashCode"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> ObjectUtils.nullSafeHashCode(<span class="keyword">this</span>.provider.getType());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (method.getName().equals(<span class="string">"getTypeProvider"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.provider;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Type<span class="class">.<span class="keyword">class</span> </span>== method.getReturnType() &amp;&amp; args == <span class="keyword">null</span>) &#123; <span class="comment">// 无参方法，返回值为Type.class</span></span><br><span class="line"><span class="keyword">return</span> forTypeProvider(<span class="keyword">new</span> MethodInvokeTypeProvider(<span class="keyword">this</span>.provider, method, -<span class="number">1</span>)); <span class="comment">// 代理返回MethodInvokeTypeProvider类型</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Type[]<span class="class">.<span class="keyword">class</span> </span>== method.getReturnType() &amp;&amp; args == <span class="keyword">null</span>) &#123; <span class="comment">// 无参方法，返回值为Type[].class</span></span><br><span class="line">Type[] result = <span class="keyword">new</span> Type[((Type[]) method.invoke(<span class="keyword">this</span>.provider.getType())).length];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.length; i++) &#123;</span><br><span class="line">result[i] = forTypeProvider(<span class="keyword">new</span> MethodInvokeTypeProvider(<span class="keyword">this</span>.provider, method, i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> method.invoke(<span class="keyword">this</span>.provider.getType(), args); <span class="comment">// 其他非代理方法则委托原类型执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> ex.getTargetException();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FieldTypeProvider</span> <span class="keyword">implements</span> <span class="title">TypeProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String fieldName;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt; declaringClass;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">transient</span> Field field;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FieldTypeProvider</span><span class="params">(Field field)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.fieldName = field.getName();</span><br><span class="line">            <span class="keyword">this</span>.declaringClass = field.getDeclaringClass();</span><br><span class="line">            <span class="keyword">this</span>.field = field;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Type <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.field.getGenericType(); <span class="comment">// 其实就是获取该字段的底层java Type</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">getSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.field; <span class="comment">// 类型所属源，其实就是该字段</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 支持从输入流中读取并反序列化该对象及field字段</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream inputStream)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">            inputStream.defaultReadObject();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.field = <span class="keyword">this</span>.declaringClass.getDeclaredField(<span class="keyword">this</span>.fieldName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Could not find original class structure"</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodInvokeTypeProvider</span> <span class="keyword">implements</span> <span class="title">TypeProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> TypeProvider provider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String methodName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt; declaringClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Method method;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Object result;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MethodInvokeTypeProvider</span><span class="params">(TypeProvider provider, Method method, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.provider = provider;</span><br><span class="line"><span class="keyword">this</span>.methodName = method.getName();</span><br><span class="line"><span class="keyword">this</span>.declaringClass = method.getDeclaringClass();</span><br><span class="line"><span class="keyword">this</span>.index = index;</span><br><span class="line"><span class="keyword">this</span>.method = method;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 比如：`ParameterizedType`的`Type getRawType()`方法，这里代理后返回的其实是`MethodInvokeTypeProvider`，该类型提供者`getType()`方法返回的才是之前的结果。</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Type <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Object result = <span class="keyword">this</span>.result;</span><br><span class="line"><span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 对所提供类型的目标方法的惰性调用</span></span><br><span class="line">result = ReflectionUtils.invokeMethod(<span class="keyword">this</span>.method, <span class="keyword">this</span>.provider.getType());</span><br><span class="line"><span class="comment">// 缓存结果以便进一步调用getType()</span></span><br><span class="line"><span class="keyword">this</span>.result = result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (result <span class="keyword">instanceof</span> Type[] ? ((Type[]) result)[<span class="keyword">this</span>.index] : (Type) result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 支持从输入流中读取并反序列化该对象及method字段</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream inputStream)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">inputStream.defaultReadObject();</span><br><span class="line">Method method = ReflectionUtils.findMethod(<span class="keyword">this</span>.declaringClass, <span class="keyword">this</span>.methodName);</span><br><span class="line"><span class="keyword">if</span> (method == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot find method on deserialization: "</span> + <span class="keyword">this</span>.methodName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (method.getReturnType() != Type<span class="class">.<span class="keyword">class</span> &amp;&amp; <span class="title">method</span>.<span class="title">getReturnType</span>() !</span>= Type[]<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line"><span class="string">"Invalid return type on deserialized method - needs to be Type or Type[]: "</span> + method);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.method = method;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述构造流程结束后，该<code>ResolvableType</code>对象的<code>resolved</code>字段会被解决并赋值为<code>java.util.Map</code>，<code>generics</code>成员并未赋值。但我们 debug 看却发现，<code>generics</code>成员也被解析并赋值完毕。</p><p>其实是由于 idea IDEA debug 时，当 debug 到某个对象时，会调用对象的<code>toString()</code>方法，用来在 debug 界面显示对象信息。</p><p>可以打开<code>File | Settings | Build, Execution, Deployment | Debugger | Data Views | Java</code> 设置关闭<code>Enable &#39;toString&#39; object view</code>选项。</p><p>那为什么打开这个选项，<code>generics</code>成员也被赋值完毕了呢？让我们定位到<code>ResolvableType#toString()</code>方法源码一探究竟。</p><figure class="highlight java"><figcaption><span>org.springframework.core.ResolvableType</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isArray()) &#123;</span><br><span class="line"><span class="keyword">return</span> getComponentType() + <span class="string">"[]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.resolved == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"?"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.type <span class="keyword">instanceof</span> TypeVariable) &#123;</span><br><span class="line">TypeVariable&lt;?&gt; variable = (TypeVariable&lt;?&gt;) <span class="keyword">this</span>.type;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.variableResolver == <span class="keyword">null</span> || <span class="keyword">this</span>.variableResolver.resolveVariable(variable) == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// Don't bother with variable boundaries for toString()...</span></span><br><span class="line"><span class="comment">// Can cause infinite recursions in case of self-references</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"?"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">       <span class="comment">// 可以看到这里其实会诱发解析类型中的泛型</span></span><br><span class="line"><span class="keyword">if</span> (hasGenerics()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.resolved.getName() + <span class="string">'&lt;'</span> + StringUtils.arrayToDelimitedString(getGenerics(), <span class="string">", "</span>) + <span class="string">'&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.resolved.getName();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasGenerics</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (getGenerics().length &gt; <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> ResolvableType[] getGenerics() &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == NONE) &#123;</span><br><span class="line"><span class="keyword">return</span> EMPTY_TYPES_ARRAY;</span><br><span class="line">&#125;</span><br><span class="line">ResolvableType[] generics = <span class="keyword">this</span>.generics;</span><br><span class="line"><span class="keyword">if</span> (generics == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.type <span class="keyword">instanceof</span> Class) &#123;</span><br><span class="line">Type[] typeParams = ((Class&lt;?&gt;) <span class="keyword">this</span>.type).getTypeParameters();</span><br><span class="line">generics = <span class="keyword">new</span> ResolvableType[typeParams.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; generics.length; i++) &#123;</span><br><span class="line">generics[i] = ResolvableType.forType(typeParams[i], <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">           <span class="comment">// 而这里进入该case，再次诱发执行字段类型代理对象的已代理方法 getActualTypeArguments</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.type <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">Type[] actualTypeArguments = ((ParameterizedType) <span class="keyword">this</span>.type).getActualTypeArguments();</span><br><span class="line">generics = <span class="keyword">new</span> ResolvableType[actualTypeArguments.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; actualTypeArguments.length; i++) &#123;</span><br><span class="line">generics[i] = forType(actualTypeArguments[i], <span class="keyword">this</span>.variableResolver);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">generics = resolveType().getGenerics();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.generics = generics;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> generics;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面用一张图总结示例<code>ResolvableType</code>的解析构造过程：</p><img src="/blog/Spring%20ResolvableType/ResolvableTypeTest.png" class="">]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Spring-ResolvableType&quot;&gt;&lt;a href=&quot;#Spring-ResolvableType&quot; class=&quot;headerlink&quot; title=&quot;Spring ResolvableType&quot;&gt;&lt;/a&gt;Spring ResolvableType&lt;/h2&gt;&lt;h3 id=&quot;类型概念&quot;&gt;&lt;a href=&quot;#类型概念&quot; class=&quot;headerlink&quot; title=&quot;类型概念&quot;&gt;&lt;/a&gt;类型概念&lt;/h3&gt;&lt;p&gt;在 JDK1.5 之前所有的原始类型都通过字节码文件类&lt;code&gt;Class&lt;/code&gt;进行抽象。&lt;code&gt;Class&lt;/code&gt;类的一个具体对象就代表一个指定的原始类型。从 JDK1.5 加入了泛型类，扩充了数据类型，在 &lt;em&gt;原始类型&lt;/em&gt; 基础上扩充了 _类型变量&lt;em&gt;、&lt;/em&gt;通配符类型&lt;em&gt;、&lt;/em&gt;参数化类型&lt;em&gt;、&lt;/em&gt;泛型数组类型_。&lt;code&gt;Type&lt;/code&gt;是 Java 语言中所有类型（&lt;code&gt;Class&lt;/code&gt;）的公共父接口。&lt;/p&gt;
&lt;img src=&quot;/blog/Spring%20ResolvableType/Type.png&quot; class=&quot;&quot;&gt;

&lt;ul&gt;
&lt;li&gt;类型变量（&lt;code&gt;TypeVariable&lt;/code&gt;）：是各种类型变量的公共父接口，就是泛型里面的类似&lt;code&gt;T&lt;/code&gt;、&lt;code&gt;E&lt;/code&gt;。 例如：&lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt;中的&lt;code&gt;T&lt;/code&gt;类型。&lt;/li&gt;
&lt;li&gt;通配符类型（&lt;code&gt;WildcardType&lt;/code&gt;）：又叫泛型表达式类型。例如：&lt;code&gt;List&amp;lt;?&amp;gt;&lt;/code&gt;中的&lt;code&gt;?&lt;/code&gt;，&lt;code&gt;List&amp;lt;? extends Number&amp;gt;&lt;/code&gt;中的&lt;code&gt;? extends Number&lt;/code&gt;或&lt;code&gt;Set&amp;lt;? super Integer&amp;gt;&lt;/code&gt;中的&lt;code&gt;? super Integer&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;参数化类型（&lt;code&gt;ParameterizedType&lt;/code&gt;）：泛型类型。例如：&lt;code&gt;List&amp;lt;E&amp;gt;&lt;/code&gt;、&lt;code&gt;Map&amp;lt;K, V&amp;gt;&lt;/code&gt;、&lt;code&gt;List&amp;lt;? extends Number&amp;gt;&lt;/code&gt;带有类型参数的类型。&lt;ul&gt;
&lt;li&gt;注意：&lt;code&gt;TypeVariable&lt;/code&gt;代表着泛型中的变量，而&lt;code&gt;ParameterizedType&lt;/code&gt;则代表整个泛型。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;泛型数组类型（&lt;code&gt;GenericArrayType&lt;/code&gt;）：并不是我们平常所使用的数组&lt;code&gt;String[]&lt;/code&gt; 、&lt;code&gt;byte[]&lt;/code&gt;。而是带有泛型的数组，例如：&lt;code&gt;T[]&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;原始类型（&lt;code&gt;Class&lt;/code&gt;）：不仅包括我们平常所指的类、枚举、数组、注解，还包括 8 种基本类型（&lt;code&gt;byte&lt;/code&gt;、&lt;code&gt;short&lt;/code&gt;、&lt;code&gt;int&lt;/code&gt;、&lt;code&gt;long&lt;/code&gt;、&lt;code&gt;float&lt;/code&gt;、&lt;code&gt;double&lt;/code&gt;、&lt;code&gt;char&lt;/code&gt;和&lt;code&gt;boolean&lt;/code&gt;）。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="http://xiaojiaC.github.io/blog/categories/JAVA/"/>
    
      <category term="Spring" scheme="http://xiaojiaC.github.io/blog/categories/JAVA/Spring/"/>
    
    
      <category term="spring" scheme="http://xiaojiaC.github.io/blog/tags/spring/"/>
    
      <category term="spring core" scheme="http://xiaojiaC.github.io/blog/tags/spring-core/"/>
    
  </entry>
  
  <entry>
    <title>Spring AOP原理</title>
    <link href="http://xiaojiac.github.io/blog/SpringAOP%E5%8E%9F%E7%90%86.html"/>
    <id>http://xiaojiac.github.io/blog/SpringAOP%E5%8E%9F%E7%90%86.html</id>
    <published>2023-11-05T13:31:11.000Z</published>
    <updated>2023-12-29T07:52:06.636Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-AOP-原理"><a href="#Spring-AOP-原理" class="headerlink" title="Spring AOP 原理"></a>Spring AOP 原理</h2><h3 id="AOP-概念"><a href="#AOP-概念" class="headerlink" title="AOP 概念"></a>AOP 概念</h3><p>AOP(Aspect Oriented Programming)是一种面向切面的编程思想，是面向对象（OOP）编程的一种补充和完善。它通过预编译和运行期动态代理，实现在不修改源代码的情况下给程序动态统一的添加额外的功能。</p><ul><li>切面（<code>Aspect</code>）：切面将多个类的通用行为封装成可重用的模块，该模块含有一组 API 提供横切功能。</li><li>连接点（<code>JoinPoint</code>）：连接点表示切面将会被织入到目标对象的哪个位置。</li><li>切入点（<code>Pointcut</code>）：切入点是一个或一组连接点，通知将在这些位置执行。可以通过切点表达式指明。</li><li>通知（<code>Advice</code>）：通知包括以下几种类型待织入到目标类中的切面代码。<ul><li>前置通知（Before）：在连接点之前执行。</li><li>环绕通知（Around）：在连接点之前和之后执行。</li><li>返回通知（After Returning）：在连接点正常返回后执行。</li><li>异常通知（After Throwing）：在连接点抛出异常后执行。</li><li>后置通知（After）：在连接点之后执行（不管是正常返回还是抛出异常）。</li></ul></li><li>织入（<code>Weaving</code>）：织入是将切面代码编织到目标对象中的过程，可以发生在编译时、加载时或运行时。Spring AOP 以动态代理技术为主进行织入。</li><li>引入（<code>Introduction</code>）：引入允许我们在已存在的类中增加新的方法和属性。</li></ul><a id="more"></a><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>新建 SpringBoot 2.2.4.RELEASE 项目，<code>pom.xml</code>引入如下依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-aop&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><p>新建<code>TatgetBean</code>类：</p><figure class="highlight java"><figcaption><span>TargetBean.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"invoke test..."</span>);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasLength(value)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"value cannot be empty"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建<code>TatgetBeanAspect</code>切面类：</p><figure class="highlight java"><figcaption><span>TatgetBeanAspect.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetBeanAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(public * com.example..*.TargetBean.test(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointcut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"pointcut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBefore</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onBefore："</span> + joinPoint.getSignature().getName() + <span class="string">" args:"</span></span><br><span class="line">                + Arrays.asList(joinPoint.getArgs()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"pointcut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAfter</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onAfter："</span> + joinPoint.getSignature().getName() + <span class="string">" args:"</span></span><br><span class="line">                + Arrays.asList(joinPoint.getArgs()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning</span>(value = <span class="string">"pointcut()"</span>, returning = <span class="string">"result"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(JoinPoint joinPoint, Object result)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"afterReturning："</span> + joinPoint.getSignature().getName() + <span class="string">" args:"</span></span><br><span class="line">                + Arrays.asList(joinPoint.getArgs()) + <span class="string">" result:"</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(value = <span class="string">"pointcut()"</span>, throwing = <span class="string">"exception"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(JoinPoint joinPoint, Exception exception)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"afterThrowing："</span> + joinPoint.getSignature().getName() + <span class="string">" args:"</span></span><br><span class="line">                + Arrays.asList(joinPoint.getArgs()) + <span class="string">" exception:"</span> + exception);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这几个通知的执行顺序如下：</p><ul><li>正常情况：<code>@Before</code> —&gt; 目标方法 —&gt; <code>@After</code> —&gt; <code>@AfterReturning</code></li><li>异常情况：<code>@Before</code> —&gt; 目标方法 —&gt; <code>@After</code> —&gt; <code>@AfterThrowing</code></li></ul><p>新建<code>DemoApplication</code>测试类：</p><figure class="highlight java"><figcaption><span>DemoApplication.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context = SpringApplication.run(DemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">        TargetBean bean = context.getBean(TargetBean<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        bean.test(<span class="string">"ok"</span>); <span class="comment">// 正常情况</span></span><br><span class="line">        bean.test(<span class="string">""</span>); <span class="comment">// 异常情况</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">onBefore：test args:[ok]</span><br><span class="line">invoke test...</span><br><span class="line">onAfter：test args:[ok]</span><br><span class="line">afterReturning：test args:[ok] result:ok</span><br><span class="line"></span><br><span class="line">onBefore：test args:[]</span><br><span class="line">invoke test...</span><br><span class="line">onAfter：test args:[]</span><br><span class="line">Exception in thread &quot;main&quot; afterThrowing：test args:[] exception:java.lang.IllegalArgumentException: value cannot be empty</span><br><span class="line">java.lang.IllegalArgumentException: value cannot be empty</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>可以看到结果符合预期，Spring AOP 成功将各个通知方法织入到了目标方法的各个执行阶段。</p><h3 id="创建代理对象"><a href="#创建代理对象" class="headerlink" title="创建代理对象"></a>创建代理对象</h3><h4 id="EnableAspectJAutoProxy"><a href="#EnableAspectJAutoProxy" class="headerlink" title="@EnableAspectJAutoProxy"></a><code>@EnableAspectJAutoProxy</code></h4><p>上述示例中引入了 Spring Boot 中开箱即用的<code>spring-boot-starter-aop</code>，<code>@EnableAspectJAutoProxy</code> 注解用于开启 AspectJ 自动代理，源码如下：</p><figure class="highlight java"><figcaption><span>org.springframework.context.annotation.EnableAspectJAutoProxy.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;AspectJAutoProxyRegistrar<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableAspectJAutoProxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">proxyTargetClass</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">exposeProxy</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该注解类上通过<code>@Import</code>导入了<code>AspectJAutoProxyRegistrarAspectJ</code>自动代理注册器。</p><figure class="highlight java"><figcaption><span>org.springframework.context.annotation.AspectJAutoProxyRegistrar.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AspectJAutoProxyRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Register, escalate, and configure the AspectJ auto proxy creator based on the value</span></span><br><span class="line"><span class="comment">     * of the @&#123;<span class="doctag">@link</span> EnableAspectJAutoProxy#proxyTargetClass()&#125; attribute on the importing</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> <span class="doctag">@Configuration</span>&#125; class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 注册AnnotationAwareAspectJAutoProxyCreator</span></span><br><span class="line">        AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);</span><br><span class="line"></span><br><span class="line">        AnnotationAttributes enableAspectJAutoProxy =</span><br><span class="line">                AnnotationConfigUtils.attributesFor(importingClassMetadata, EnableAspectJAutoProxy<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (enableAspectJAutoProxy != <span class="keyword">null</span>) &#123; <span class="comment">// 配置属性值</span></span><br><span class="line">            <span class="keyword">if</span> (enableAspectJAutoProxy.getBoolean(<span class="string">"proxyTargetClass"</span>)) &#123;</span><br><span class="line">                AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (enableAspectJAutoProxy.getBoolean(<span class="string">"exposeProxy"</span>)) &#123;</span><br><span class="line">                AopConfigUtils.forceAutoProxyCreatorToExposeProxy(registry);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该注册器的作用是往 IOC 容器里注册了一个类型为<code>AnnotationAwareAspectJAutoProxyCreator</code>的 Bean，其名称为<code>org.springframework.aop.config.internalAutoProxyCreator</code>。</p><figure class="highlight java"><figcaption><span>org.springframework.aop.config.AopConfigUtils.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AopConfigUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BeanDefinition <span class="title">registerAspectJAnnotationAutoProxyCreatorIfNecessary</span><span class="params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BeanDefinition <span class="title">registerAspectJAnnotationAutoProxyCreatorIfNecessary</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            BeanDefinitionRegistry registry, @Nullable Object source)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> registerOrEscalateApcAsRequired(AnnotationAwareAspectJAutoProxyCreator<span class="class">.<span class="keyword">class</span>, <span class="title">registry</span>, <span class="title">source</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> BeanDefinition <span class="title">registerOrEscalateApcAsRequired</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            Class&lt;?&gt; cls, BeanDefinitionRegistry registry, @Nullable Object source)</span> </span>&#123;</span><br><span class="line">        Assert.notNull(registry, <span class="string">"BeanDefinitionRegistry must not be null"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断容器中是否包含org.springframework.aop.config.internalAutoProxyCreator bean</span></span><br><span class="line">        <span class="keyword">if</span> (registry.containsBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME)) &#123;</span><br><span class="line">            BeanDefinition apcDefinition = registry.getBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME);</span><br><span class="line">            <span class="keyword">if</span> (!cls.getName().equals(apcDefinition.getBeanClassName())) &#123;</span><br><span class="line">                <span class="keyword">int</span> currentPriority = findPriorityForClass(apcDefinition.getBeanClassName());</span><br><span class="line">                <span class="keyword">int</span> requiredPriority = findPriorityForClass(cls);</span><br><span class="line">                <span class="comment">// 若已包含但优先级较低，则重置Bean类名</span></span><br><span class="line">                <span class="keyword">if</span> (currentPriority &lt; requiredPriority) &#123;</span><br><span class="line">                    apcDefinition.setBeanClassName(cls.getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不包含则通过RootBeanDefinition注册一个 AnnotationAwareAspectJAutoProxyCreator bean</span></span><br><span class="line">        RootBeanDefinition beanDefinition = <span class="keyword">new</span> RootBeanDefinition(cls);</span><br><span class="line">        beanDefinition.setSource(source);</span><br><span class="line">        beanDefinition.getPropertyValues().add(<span class="string">"order"</span>, Ordered.HIGHEST_PRECEDENCE);</span><br><span class="line">        beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">        registry.registerBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME, beanDefinition);</span><br><span class="line">        <span class="keyword">return</span> beanDefinition;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AnnotationAwareAspectJAutoProxyCreator"><a href="#AnnotationAwareAspectJAutoProxyCreator" class="headerlink" title="AnnotationAwareAspectJAutoProxyCreator"></a><code>AnnotationAwareAspectJAutoProxyCreator</code></h4><p>通过前面的分析，得知核心在<code>AnnotationAwareAspectJAutoProxyCreator</code>类上，其层级结构如下：</p><img src="/blog/SpringAOP%E5%8E%9F%E7%90%86/AnnotationAwareAspectJAutoProxyCreator.png" class=""><p>可以看到<code>AnnotationAwareAspectJAutoProxyCreator</code>的祖先类<code>AbstractAutoProxyCreator</code>实现了<code>SmartInstantiationAwareBeanPostProcessor</code>和<code>BeanFactoryAware</code>接口。</p><p>实现<code>BeanFactoryAware</code>用于在 Bean 初始化时注入<code>BeanFactory</code>，而<code>SmartInstantiationAwareBeanPostProcessor</code>的父接口为 <code>InstantiationAwareBeanPostProcessor</code>，该接口又继承自<code>BeanPostProcessor</code>接口。这两个接口的作用如下所述。</p><h5 id="BeanPostProcessor"><a href="#BeanPostProcessor" class="headerlink" title="BeanPostProcessor"></a><code>BeanPostProcessor</code></h5><ul><li><code>postProcessBeforeInitialization</code>：方法将在 Bean 实例的<code>afterPropertiesSet</code>方法或者自定义的<code>init</code>方法被<strong>调用前</strong>调用，此时 Bean 属性已经被赋值。方法返回原始 Bean 实例或者包装后的 Bean 实例，如果返回<code>null</code>，则后续的后置处理方法不再被调用。</li><li><code>postProcessAfterInitialization</code>：方法将在 Bean 实例的<code>afterPropertiesSet</code>方法或者自定义的<code>init</code>方法被<strong>调用后</strong>调用，此时 Bean 属性已经被赋值。方法返回原始 Bean 实例或者包装后的 Bean 实例，如果返回<code>null</code>，则后续的后置处理方法不再被调用。</li></ul><h5 id="InstantiationAwareBeanPostProcessor"><a href="#InstantiationAwareBeanPostProcessor" class="headerlink" title="InstantiationAwareBeanPostProcessor"></a><code>InstantiationAwareBeanPostProcessor</code></h5><ul><li><code>postProcessBeforeInstantiation</code>：在 Bean <strong>实例化前</strong>调用该方法，返回值可以为代理后的 Bean，以此代替 Bean 默认的实例化过程。如果返回<code>null</code>，继续默认实例化。</li><li><code>postProcessAfterInstantiation</code>：当 Bean 通过构造器或者工厂方法被<strong>实例化后</strong>，当属性还未被赋值前，该方法会被调用，一般用于自定义属性赋值。方法返回值为布尔类型，返回<code>true</code>时，表示 Bean 属性需要被赋值；返回<code>false</code>表示跳过 Bean 属性赋值。</li><li><code>postProcessProperties</code>：在 Bean 工厂将给定的属性值应用于给定的 Bean 之前，对其进行后处理，该方法不需要任何属性描述符。如果返回<code>null</code>，继续调用<code>postProcessPropertyValues</code>；否则返回工厂即将应用的所有属性值。</li><li><code>postProcessPropertyValues</code>：与<code>postProcessProperties</code>方法不同的是，该方法多了参数属性描述符<code>PropertyDescriptor[]</code>。它允许检查是否满足了所有依赖项，例如基于 Bean 属性设置器上的<code>@Required</code>注解；还允许替换将要应用的属性值，通常是基于原始 <code>PropertyValues</code>实例创建新的<code>MutablePropertyValues</code>实例，添加或删除特定值。</li></ul><blockquote><p><code>Initialization</code>为初始化，<code>Instantiation</code>为实例化。在 Spring Bean 生命周期中，实例化指的是创建 Bean 的过程，初始化指的是 Bean 创建后，对其属性进行赋值、后置处理等操作的过程，所以实例化执行时机先于初始化。</p></blockquote><p><code>AbstractAutoProxyCreator</code>类实现了<code>InstantiationAwareBeanPostProcessor</code>接口的<code>postProcessBeforeInstantiation</code>方法（自定义 Bean 实例化前置逻辑），实现了<code>BeanPostProcessor</code>的<code>postProcessAfterInitialization</code>方法（自定义 Bean 初始化后置逻辑）</p><figure class="highlight java"><figcaption><span>org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractAutoProxyCreator</span> <span class="keyword">extends</span> <span class="title">ProxyProcessorSupport</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">SmartInstantiationAwareBeanPostProcessor</span>, <span class="title">BeanFactoryAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于存放所有Bean是否需要增强标识，键为每个Bean的cacheKey，值为布尔类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Object, Boolean&gt; advisedBeans = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过Bean名称和Bean类型获取该Bean的唯一缓存键名</span></span><br><span class="line">        Object cacheKey = getCacheKey(beanClass, beanName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasLength(beanName) || !<span class="keyword">this</span>.targetSourcedBeans.contains(beanName)) &#123;</span><br><span class="line">            <span class="comment">// 判断当前Bean是否包含在advisedBeans集合中</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.advisedBeans.containsKey(cacheKey)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断当前Bean是否是基础设施类 || 给定的Bean名称是否表示原始实例(以.ORIGINAL结尾)</span></span><br><span class="line">            <span class="keyword">if</span> (isInfrastructureClass(beanClass) || shouldSkip(beanClass, beanName)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果我们有自定义 TargetSource，会在此处创建代理</span></span><br><span class="line">        <span class="comment">// 抑制目标Bean不必要的默认实例化：TargetSource 将以自定义方式处理目标实例</span></span><br><span class="line">        TargetSource targetSource = getCustomTargetSource(beanClass, beanName);</span><br><span class="line">        <span class="keyword">if</span> (targetSource != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.hasLength(beanName)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.targetSourcedBeans.add(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(beanClass, beanName, targetSource);</span><br><span class="line">            Object proxy = createProxy(beanClass, beanName, specificInterceptors, targetSource);</span><br><span class="line">            <span class="keyword">this</span>.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class="line">            <span class="keyword">return</span> proxy;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// 可以看出我们的TargetBean均不满足以上case，返回了null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">postProcessAfterInstantiation</span><span class="params">(Object bean, String beanName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PropertyValues <span class="title">postProcessProperties</span><span class="params">(PropertyValues pvs, Object bean, String beanName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pvs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果该Bean被子类识别为需要代理的Bean，则使用配置的拦截器创建一个代理。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(@Nullable Object bean, String beanName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bean != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Object cacheKey = getCacheKey(bean.getClass(), beanName);</span><br><span class="line">            <span class="comment">// 此处null != TargetBean，因此执行wrapIfNecessary</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.earlyProxyReferences.remove(cacheKey) != bean) &#123;</span><br><span class="line">                <span class="keyword">return</span> wrapIfNecessary(bean, beanName, cacheKey);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">wrapIfNecessary</span><span class="params">(Object bean, String beanName, Object cacheKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasLength(beanName) &amp;&amp; <span class="keyword">this</span>.targetSourcedBeans.contains(beanName)) &#123;</span><br><span class="line">            <span class="keyword">return</span> bean;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Boolean.FALSE.equals(<span class="keyword">this</span>.advisedBeans.get(cacheKey))) &#123;</span><br><span class="line">            <span class="keyword">return</span> bean;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">            <span class="keyword">return</span> bean;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取该Bean对应的通知方法集合</span></span><br><span class="line">        Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (specificInterceptors != DO_NOT_PROXY) &#123;</span><br><span class="line">            <span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.TRUE);</span><br><span class="line">            <span class="comment">// 如果该Bean的通知方法集合不为空的话，则创建该Bean的代理对象</span></span><br><span class="line">            Object proxy = createProxy(</span><br><span class="line">                    bean.getClass(), beanName, specificInterceptors, <span class="keyword">new</span> SingletonTargetSource(bean));</span><br><span class="line">            <span class="keyword">this</span>.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class="line">            <span class="keyword">return</span> proxy;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断当前Bean是否是Advice，Pointcut，Advisor，AopInfrastructureBean的子类</span></span><br><span class="line"><span class="comment">     * AnnotationAwareAspectJAutoProxyCreator子类重写了该方法，增加了是否为切面类（<span class="doctag">@Aspect</span>注解标注）判断</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isInfrastructureClass</span><span class="params">(Class&lt;?&gt; beanClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> retVal = Advice<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">beanClass</span>) ||</span></span><br><span class="line"><span class="class">                <span class="title">Pointcut</span>.<span class="title">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">beanClass</span>) ||</span></span><br><span class="line"><span class="class">                <span class="title">Advisor</span>.<span class="title">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">beanClass</span>) ||</span></span><br><span class="line"><span class="class">                <span class="title">AopInfrastructureBean</span>.<span class="title">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">beanClass</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (retVal &amp;&amp; logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">"Did not attempt to auto-proxy infrastructure class ["</span> + beanClass.getName() + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">createProxy</span><span class="params">(Class&lt;?&gt; beanClass, @Nullable String beanName,</span></span></span><br><span class="line"><span class="function"><span class="params">            @Nullable Object[] specificInterceptors, TargetSource targetSource)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory <span class="keyword">instanceof</span> ConfigurableListableBeanFactory) &#123;</span><br><span class="line">            AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) <span class="keyword">this</span>.beanFactory, beanName, beanClass);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ProxyFactory proxyFactory = <span class="keyword">new</span> ProxyFactory();</span><br><span class="line">        proxyFactory.copyFrom(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!proxyFactory.isProxyTargetClass()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (shouldProxyTargetClass(beanClass, beanName)) &#123;</span><br><span class="line">                proxyFactory.setProxyTargetClass(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                evaluateProxyInterfaces(beanClass, proxyFactory);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将specificInterceptors包装未Advisor类型数组</span></span><br><span class="line">        Advisor[] advisors = buildAdvisors(beanName, specificInterceptors);</span><br><span class="line">        proxyFactory.addAdvisors(advisors); <span class="comment">// 保存到代理工厂中</span></span><br><span class="line">        proxyFactory.setTargetSource(targetSource); <span class="comment">// 设置目标代理对象</span></span><br><span class="line">        customizeProxyFactory(proxyFactory);</span><br><span class="line"></span><br><span class="line">        proxyFactory.setFrozen(<span class="keyword">this</span>.freezeProxy);</span><br><span class="line">        <span class="keyword">if</span> (advisorsPreFiltered()) &#123;</span><br><span class="line">            proxyFactory.setPreFiltered(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 代理工厂创建代理对象</span></span><br><span class="line">        <span class="keyword">return</span> proxyFactory.getProxy(getProxyClassLoader());</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getAdvicesAndAdvisorsForBean</code>方法内部主要包含以下逻辑：</p><figure class="highlight java"><figcaption><span>org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractAdvisorAutoProxyCreator</span> <span class="keyword">extends</span> <span class="title">AbstractAutoProxyCreator</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">protected</span> Object[] getAdvicesAndAdvisorsForBean(</span><br><span class="line">            Class&lt;?&gt; beanClass, String beanName, <span class="meta">@Nullable</span> TargetSource targetSource) &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Advisor&gt; advisors = findEligibleAdvisors(beanClass, beanName);</span><br><span class="line">        <span class="keyword">if</span> (advisors.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> DO_NOT_PROXY;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> advisors.toArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> List&lt;Advisor&gt; <span class="title">findEligibleAdvisors</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取所有的通知方法（切面里定义的各个通知方法）</span></span><br><span class="line">        List&lt;Advisor&gt; candidateAdvisors = findCandidateAdvisors();</span><br><span class="line">        <span class="comment">// 通过切点表达式判断这些通知方法是否可为当前Bean所用</span></span><br><span class="line">        List&lt;Advisor&gt; eligibleAdvisors = findAdvisorsThatCanApply(candidateAdvisors, beanClass, beanName);</span><br><span class="line">        <span class="comment">// 如果启用AspectJ，会增加一个特殊的通知（ExposeInvocationInterceptor.ADVISOR）</span></span><br><span class="line">        extendAdvisors(eligibleAdvisors);</span><br><span class="line">        <span class="comment">// 如果有符合的通知方法，则对它们进行排序</span></span><br><span class="line">        <span class="keyword">if</span> (!eligibleAdvisors.isEmpty()) &#123;</span><br><span class="line">            eligibleAdvisors = sortAdvisors(eligibleAdvisors);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> eligibleAdvisors;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于我们的示例<code>TargetBean</code>而言，<code>getAdvicesAndAdvisorsForBean</code>方法返回值如下所示：</p><img src="/blog/SpringAOP%E5%8E%9F%E7%90%86/getAdvicesAndAdvisorsForBean.png" class=""><p>这些通知方法就是我们在<code>TargetBeanAspect</code>切面里定义的通知方法和附加的<code>ExposeInvocationInterceptor.ADVISOR</code>。</p><p>如果该 Bean 的通知方法集合不为空的话，则通过<code>ProxyFactory</code>创建该 Bean 的代理对象，具体查看如下源码：</p><figure class="highlight java"><figcaption><span>org.springframework.aop.framework.ProxyFactory.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> <span class="keyword">extends</span> <span class="title">ProxyCreatorSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">(@Nullable ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createAopProxy().getProxy(classLoader);</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>org.springframework.aop.framework.ProxyCreatorSupport.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyCreatorSupport</span> <span class="keyword">extends</span> <span class="title">AdvisedSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> AopProxy <span class="title">createAopProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.active) &#123;</span><br><span class="line">            activate();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getAopProxyFactory().createAopProxy(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>org.springframework.aop.framework.DefaultAopProxyFactory.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultAopProxyFactory</span> <span class="keyword">implements</span> <span class="title">AopProxyFactory</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AopProxy <span class="title">createAopProxy</span><span class="params">(AdvisedSupport config)</span> <span class="keyword">throws</span> AopConfigException </span>&#123;</span><br><span class="line">        <span class="comment">// isOptimize(): 默认false，是否考虑优先采用Cglib，因为Cglib的性能高于JDK的Proxy</span></span><br><span class="line">        <span class="comment">// isProxyTargetClass(): 默认false，是否基于类的代理</span></span><br><span class="line">        <span class="comment">// hasNoUserSuppliedProxyInterfaces: 根据被代理类的接口判断，如果未实现任何接口，那么也采用Cglib</span></span><br><span class="line">        <span class="keyword">if</span> (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) &#123;</span><br><span class="line">            Class&lt;?&gt; targetClass = config.getTargetClass();</span><br><span class="line">            <span class="keyword">if</span> (targetClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">"TargetSource cannot determine target class: "</span> +</span><br><span class="line">                        <span class="string">"Either an interface or a target is required for proxy creation."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 当前类是接口 或者 是java.lang.reflect.Proxy JDK代理类</span></span><br><span class="line">            <span class="keyword">if</span> (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> JdkDynamicAopProxy(config); <span class="comment">// 使用jdk动态代理</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ObjenesisCglibAopProxy(config); <span class="comment">// 使用cglib动态代理</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> JdkDynamicAopProxy(config);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Determine whether the supplied &#123;<span class="doctag">@link</span> AdvisedSupport&#125; has only the</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> org.springframework.aop.SpringProxy&#125; interface specified</span></span><br><span class="line"><span class="comment">     * (or no proxy interfaces specified at all).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasNoUserSuppliedProxyInterfaces</span><span class="params">(AdvisedSupport config)</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt;[] ifcs = config.getProxiedInterfaces();</span><br><span class="line">        return (ifcs.length == 0 || (ifcs.length == 1 &amp;&amp; SpringProxy.class.isAssignableFrom(ifcs[0])));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后续从 IOC 容器中获得的<code>TargetBean</code>就是被代理后的对象，执行代理对象的目标方法的时候，代理对象会执行相应的通知方法链。</p><h3 id="构建拦截器链"><a href="#构建拦截器链" class="headerlink" title="构建拦截器链"></a>构建拦截器链</h3><p>AOP 代理对象生成后，我们继续关注代理对象的目标方法执行时，通知方法是怎么被执行的。</p><p>首先在入口类<code>DemoApplication</code>的如下位置打个断点，以 debug 方式启动程序：</p><img src="/blog/SpringAOP%E5%8E%9F%E7%90%86/DemoApplication.png" class=""><p>可以看到获取到的<code>TargetBean</code>就是前面 cglib 代理后的 Bean（<code>TargetBean$$EnhanceBySpringCGLIB$$1bb9151e@3284</code>）。点击 Step Into 进入<code>test</code>方法内部调用逻辑，会发现程序跳转到了<code>CglibAopProxy$DynamicAdvisedInterceptor</code>的<code>intercept</code>方法中。也就是需要我们重点关注的<code>CGLIB$CALLBACK_0</code>：</p><figure class="highlight java"><figcaption><span>org.springframework.aop.framework.CglibAopProxy.DynamicAdvisedInterceptor.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicAdvisedInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AdvisedSupport advised;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicAdvisedInterceptor</span><span class="params">(AdvisedSupport advised)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.advised = advised;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object oldProxy = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">boolean</span> setProxyContext = <span class="keyword">false</span>;</span><br><span class="line">        Object target = <span class="keyword">null</span>;</span><br><span class="line">        TargetSource targetSource = <span class="keyword">this</span>.advised.getTargetSource();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 若配置了exposeProxy=true，则暴露当前代理对象到线程上下文</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.advised.exposeProxy) &#123;</span><br><span class="line">                oldProxy = AopContext.setCurrentProxy(proxy);</span><br><span class="line">                setProxyContext = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Get as late as possible to minimize the time we "own" the target, in case it comes from a pool...</span></span><br><span class="line">            target = targetSource.getTarget();</span><br><span class="line">            Class&lt;?&gt; targetClass = (target != <span class="keyword">null</span> ? target.getClass() : <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">// 获取目标对象目标方法的拦截器链</span></span><br><span class="line">            List&lt;Object&gt; chain = <span class="keyword">this</span>.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);</span><br><span class="line">            Object retVal;</span><br><span class="line">            <span class="comment">// 如果无拦截器链，直接通过反射执行目标方法</span></span><br><span class="line">            <span class="keyword">if</span> (chain.isEmpty() &amp;&amp; Modifier.isPublic(method.getModifiers())) &#123;</span><br><span class="line">                <span class="comment">// We can skip creating a MethodInvocation: just invoke the target directly.</span></span><br><span class="line">                <span class="comment">// Note that the final invoker must be an InvokerInterceptor, so we know</span></span><br><span class="line">                <span class="comment">// it does nothing but a reflective operation on the target, and no hot</span></span><br><span class="line">                <span class="comment">// swapping or fancy proxying.</span></span><br><span class="line">                Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args);</span><br><span class="line">                retVal = methodProxy.invoke(target, argsToUse);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 否则需要创建一个CglibMethodInvocation对象，执行它的proceed方法</span></span><br><span class="line">                retVal = <span class="keyword">new</span> CglibMethodInvocation(proxy, target, method, args, targetClass, chain, methodProxy).proceed();</span><br><span class="line">            &#125;</span><br><span class="line">            retVal = processReturnType(proxy, target, method, retVal);</span><br><span class="line">            <span class="keyword">return</span> retVal;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (target != <span class="keyword">null</span> &amp;&amp; !targetSource.isStatic()) &#123;</span><br><span class="line">                targetSource.releaseTarget(target);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (setProxyContext) &#123;</span><br><span class="line">                <span class="comment">// Restore old proxy.</span></span><br><span class="line">                AopContext.setCurrentProxy(oldProxy);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里先将目光聚焦到<code>getInterceptorsAndDynamicInterceptionAdvice</code>方法，其源码如下所示：</p><figure class="highlight java"><figcaption><span>org.springframework.aop.framework.AdvisedSupport.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdvisedSupport</span> <span class="keyword">extends</span> <span class="title">ProxyConfig</span> <span class="keyword">implements</span> <span class="title">Advised</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">getInterceptorsAndDynamicInterceptionAdvice</span><span class="params">(Method method, @Nullable Class&lt;?&gt; targetClass)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建目标方法的缓存键</span></span><br><span class="line">        MethodCacheKey cacheKey = <span class="keyword">new</span> MethodCacheKey(method);</span><br><span class="line">        List&lt;Object&gt; cached = <span class="keyword">this</span>.methodCache.get(cacheKey);</span><br><span class="line">        <span class="keyword">if</span> (cached == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果无缓存则获取拦截器链并缓存</span></span><br><span class="line">            cached = <span class="keyword">this</span>.advisorChainFactory.getInterceptorsAndDynamicInterceptionAdvice(</span><br><span class="line">                    <span class="keyword">this</span>, method, targetClass);</span><br><span class="line">            <span class="keyword">this</span>.methodCache.put(cacheKey, cached);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cached;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>org.springframework.aop.framework.DefaultAdvisorChainFactory.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultAdvisorChainFactory</span> <span class="keyword">implements</span> <span class="title">AdvisorChainFactory</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">getInterceptorsAndDynamicInterceptionAdvice</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            Advised config, Method method, @Nullable Class&lt;?&gt; targetClass)</span> </span>&#123;</span><br><span class="line">        AdvisorAdapterRegistry registry = GlobalAdvisorAdapterRegistry.getInstance();</span><br><span class="line">        <span class="comment">// 获取Advisor列表</span></span><br><span class="line">        Advisor[] advisors = config.getAdvisors();</span><br><span class="line">        List&lt;Object&gt; interceptorList = <span class="keyword">new</span> ArrayList&lt;&gt;(advisors.length);</span><br><span class="line">        Class&lt;?&gt; actualClass = (targetClass != <span class="keyword">null</span> ? targetClass : method.getDeclaringClass());</span><br><span class="line">        Boolean hasIntroductions = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Advisor advisor : advisors) &#123;</span><br><span class="line">            <span class="keyword">if</span> (advisor <span class="keyword">instanceof</span> PointcutAdvisor) &#123;</span><br><span class="line">                <span class="comment">// 如果是PointcutAdvisor实例，仅代理通过类型匹配和方法匹配的方法</span></span><br><span class="line">                PointcutAdvisor pointcutAdvisor = (PointcutAdvisor) advisor;</span><br><span class="line">                <span class="comment">// 若已预过滤过，或进行类匹配检查通过</span></span><br><span class="line">                <span class="keyword">if</span> (config.isPreFiltered() || pointcutAdvisor.getPointcut().getClassFilter().matches(actualClass)) &#123;</span><br><span class="line">                    <span class="comment">// 再进行方法匹配检查</span></span><br><span class="line">                    MethodMatcher mm = pointcutAdvisor.getPointcut().getMethodMatcher();</span><br><span class="line">                    <span class="keyword">boolean</span> match;</span><br><span class="line">                    <span class="keyword">if</span> (mm <span class="keyword">instanceof</span> IntroductionAwareMethodMatcher) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (hasIntroductions == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            hasIntroductions = hasMatchingIntroductions(advisors, actualClass);</span><br><span class="line">                        &#125;</span><br><span class="line">                        match = ((IntroductionAwareMethodMatcher) mm).matches(method, actualClass, hasIntroductions);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        match = mm.matches(method, actualClass);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (match) &#123;</span><br><span class="line">                        <span class="comment">// 切点匹配，则通过注册器将Advisor通知适配成MethodInterceptor数组</span></span><br><span class="line">                        MethodInterceptor[] interceptors = registry.getInterceptors(advisor);</span><br><span class="line">                        <span class="keyword">if</span> (mm.isRuntime()) &#123;</span><br><span class="line">                            <span class="comment">// Creating a new object instance in the getInterceptors() method</span></span><br><span class="line">                            <span class="comment">// isn't a problem as we normally cache created chains.</span></span><br><span class="line">                            <span class="keyword">for</span> (MethodInterceptor interceptor : interceptors) &#123;</span><br><span class="line">                                interceptorList.add(<span class="keyword">new</span> InterceptorAndDynamicMethodMatcher(interceptor, mm));</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            interceptorList.addAll(Arrays.asList(interceptors));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果是IntroductionAdvisor实例，通过类型匹配之后，接口所有的方法都要代理</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (advisor <span class="keyword">instanceof</span> IntroductionAdvisor) &#123;</span><br><span class="line">                IntroductionAdvisor ia = (IntroductionAdvisor) advisor;</span><br><span class="line">                <span class="keyword">if</span> (config.isPreFiltered() || ia.getClassFilter().matches(actualClass)) &#123;</span><br><span class="line">                    Interceptor[] interceptors = registry.getInterceptors(advisor);</span><br><span class="line">                    interceptorList.addAll(Arrays.asList(interceptors));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123; <span class="comment">// 如果是普通的 Advisor</span></span><br><span class="line">                Interceptor[] interceptors = registry.getInterceptors(advisor);</span><br><span class="line">                interceptorList.addAll(Arrays.asList(interceptors));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> interceptorList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Determine whether the Advisors contain matching introductions.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">hasMatchingIntroductions</span><span class="params">(Advisor[] advisors, Class&lt;?&gt; actualClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Advisor advisor : advisors) &#123;</span><br><span class="line">            <span class="keyword">if</span> (advisor <span class="keyword">instanceof</span> IntroductionAdvisor) &#123;</span><br><span class="line">                IntroductionAdvisor ia = (IntroductionAdvisor) advisor;</span><br><span class="line">                <span class="keyword">if</span> (ia.getClassFilter().matches(actualClass)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 debug 我们可以看到，当前代理对象的<code>test</code>方法的拦截器链不为空，并且有 5 个元素：</p><img src="/blog/SpringAOP%E5%8E%9F%E7%90%86/getInterceptorsAndDynamicInterceptionAdvice.png" class="" title="拦截器链"><p>拦截器链第一个元素类型为<code>ExposeInvocationInterceptor</code>，是默认的拦截器。剩下四个依次为：<code>AspectJAfterThrowingAdvice</code>、<code>AfterReturningAdviceInterceptor</code>、<code>AspectJAfterAdvice</code>和<code>MethodBeforeAdviceInterceptor</code>，它们都是<code>MethodInterceptor</code>的实现类：</p><img src="/blog/SpringAOP%E5%8E%9F%E7%90%86/MethodInterceptor.png" class=""><h3 id="链式调用通知方法"><a href="#链式调用通知方法" class="headerlink" title="链式调用通知方法"></a>链式调用通知方法</h3><p>最后我们关注下这些拦截器是如何链式调用通知方法的。继续从<code>CglibMethodInvocation.proceed()</code>debug：</p><figure class="highlight java"><figcaption><span>org.springframework.aop.framework.CglibAopProxy.CglibMethodInvocation.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibMethodInvocation</span> <span class="keyword">extends</span> <span class="title">ReflectiveMethodInvocation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Nullable</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> MethodProxy methodProxy;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CglibMethodInvocation</span><span class="params">(Object proxy, @Nullable Object target, Method method,</span></span></span><br><span class="line"><span class="function"><span class="params">                Object[] arguments, @Nullable Class&lt;?&gt; targetClass,</span></span></span><br><span class="line"><span class="function"><span class="params">                List&lt;Object&gt; interceptorsAndDynamicMethodMatchers, MethodProxy methodProxy)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//  代理对象 目标对象 目标方法 目标方法参数 目标对象类   拦截器链</span></span><br><span class="line">            <span class="keyword">super</span>(proxy, target, method, arguments, targetClass, interceptorsAndDynamicMethodMatchers);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 仅对不是从 java.lang.Object 派生的公共方法使用方法代理</span></span><br><span class="line">            <span class="keyword">this</span>.methodProxy = (Modifier.isPublic(method.getModifiers()) &amp;&amp;</span><br><span class="line">                    method.getDeclaringClass() != Object<span class="class">.<span class="keyword">class</span> &amp;&amp; !<span class="title">AopUtils</span>.<span class="title">isEqualsMethod</span>(<span class="title">method</span>) &amp;&amp;</span></span><br><span class="line"><span class="class">                    !<span class="title">AopUtils</span>.<span class="title">isHashCodeMethod</span>(<span class="title">method</span>) &amp;&amp; !<span class="title">AopUtils</span>.<span class="title">isToStringMethod</span>(<span class="title">method</span>) ?</span></span><br><span class="line">                    methodProxy : null);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="meta">@Nullable</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">proceed</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.proceed(); <span class="comment">// 调用父类proceed()</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> ex;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ReflectionUtils.declaresException(getMethod(), ex.getClass())) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> ex;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Object <span class="title">invokeJoinpoint</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.methodProxy != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.methodProxy.invoke(<span class="keyword">this</span>.target, <span class="keyword">this</span>.arguments);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.invokeJoinpoint();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>查看<code>CglibMethodInvocation</code>父类<code>ReflectiveMethodInvocation</code> <code>proceed</code>方法源码：</p><h4 id="ReflectiveMethodInvocation"><a href="#ReflectiveMethodInvocation" class="headerlink" title="ReflectiveMethodInvocation"></a><code>ReflectiveMethodInvocation</code></h4><figure class="highlight java"><figcaption><span>org.springframework.aop.framework.ReflectiveMethodInvocation.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectiveMethodInvocation</span> <span class="keyword">implements</span> <span class="title">ProxyMethodInvocation</span>, <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">proceed</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// 我们从索引 -1 开始并提前递增</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.currentInterceptorIndex == <span class="keyword">this</span>.interceptorsAndDynamicMethodMatchers.size() - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> invokeJoinpoint();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取对应索引位置的拦截器</span></span><br><span class="line">        Object interceptorOrInterceptionAdvice =</span><br><span class="line">                <span class="keyword">this</span>.interceptorsAndDynamicMethodMatchers.get(++<span class="keyword">this</span>.currentInterceptorIndex);</span><br><span class="line">        <span class="comment">// 若是一个InterceptorAndDynamicMethodMatcher，则执行拦截器前需要进行方法匹配评估</span></span><br><span class="line">        <span class="keyword">if</span> (interceptorOrInterceptionAdvice <span class="keyword">instanceof</span> InterceptorAndDynamicMethodMatcher) &#123;</span><br><span class="line">            <span class="comment">// Evaluate dynamic method matcher here: static part will already have</span></span><br><span class="line">            <span class="comment">// been evaluated and found to match.</span></span><br><span class="line">            InterceptorAndDynamicMethodMatcher dm =</span><br><span class="line">                    (InterceptorAndDynamicMethodMatcher) interceptorOrInterceptionAdvice;</span><br><span class="line">            Class&lt;?&gt; targetClass = (<span class="keyword">this</span>.targetClass != <span class="keyword">null</span> ? <span class="keyword">this</span>.targetClass : <span class="keyword">this</span>.method.getDeclaringClass());</span><br><span class="line">            <span class="comment">// 动态匹配成功，则执行此拦截器</span></span><br><span class="line">            <span class="keyword">if</span> (dm.methodMatcher.matches(<span class="keyword">this</span>.method, targetClass, <span class="keyword">this</span>.arguments)) &#123;</span><br><span class="line">                <span class="keyword">return</span> dm.interceptor.invoke(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 动态匹配失败，则跳过此拦截器并调用链中的下一个拦截器</span></span><br><span class="line">                <span class="keyword">return</span> proceed();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 若是一个拦截器，则直接需调用它：切点在构造之前已经提前评估过了</span></span><br><span class="line">            <span class="keyword">return</span> ((MethodInterceptor) interceptorOrInterceptionAdvice).invoke(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序第一次进该方法时<code>currentInterceptorIndex</code>值为-1，<code>this.interceptorsAndDynamicMethodMatchers.get(++this.currentInterceptorIndex)</code>取出拦截器链第一个拦截器<code>ExposeInvocationInterceptor</code>，方法最后调用该拦截器的<code>invoke</code>方法，Step Into 进入该方法：</p><img src="/blog/SpringAOP%E5%8E%9F%E7%90%86/ExposeInvocationInterceptor.png" class=""><p><code>mi</code>就是我们传入的<code>ReflectiveMethodInvocation</code>对象，程序执行到<code>mi.proceed</code>方法时，Step Into 进入该方法。此时<code>currentInterceptorIndex</code>值为 0，会取出第二个拦截器<code>AspectJAfterThrowingAdvice</code>，继而执行其<code>invoke</code>方法：</p><img src="/blog/SpringAOP%E5%8E%9F%E7%90%86/AspectJAfterThrowingAdvice.png" class=""><p>接着又通过<code>mi.proceed</code>再次调用<code>ReflectiveMethodInvocation</code>的<code>poceed</code>方法，Step Into 进入该方法。此时<code>currentInterceptorIndex</code>值为 1，会取出第三个拦截器<code>AfterReturningAdviceInterceptor</code>，继而执行其<code>invoke</code>方法：</p><img src="/blog/SpringAOP%E5%8E%9F%E7%90%86/AfterReturningAdviceInterceptor.png" class=""><p>接着又通过<code>mi.proceed</code>再次调用<code>ReflectiveMethodInvocation</code>的<code>poceed</code>方法，Step Into 进入该方法。此时<code>currentInterceptorIndex</code>值为 2，会取出第四个拦截器<code>AspectJAfterAdvice</code>，继而执行其<code>invoke</code>方法：</p><img src="/blog/SpringAOP%E5%8E%9F%E7%90%86/AspectJAfterAdvice.png" class=""><p>接着又通过<code>mi.proceed</code>再次调用<code>ReflectiveMethodInvocation</code>的<code>poceed</code>方法，Step Into 进入该方法。此时<code>currentInterceptorIndex</code>值为 3，会取出第五个拦截器<code>MethodBeforeAdviceInterceptor</code>，继而执行其<code>invoke</code>方法：</p><img src="/blog/SpringAOP%E5%8E%9F%E7%90%86/MethodBeforeAdviceInterceptor.png" class=""><p>此时会执行前置通知，执行后控制台打印内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onBefore：test args:[ok]</span><br></pre></td></tr></table></figure><p>随后继续通过<code>mi.proceed</code>再次调用<code>ReflectiveMethodInvocation</code>的<code>poceed</code>方法，Step Into 进入该方法。此时<code>currentInterceptorIndex</code>值为 4，而拦截器链的长度为 5，判断成立所以执行<code>invokeJoinpoint()</code>方法，该方法内部通过反射调用了目标方法：</p><img src="/blog/SpringAOP%E5%8E%9F%E7%90%86/ReflectiveMethodInvocation_proceed.png" class=""><p><code>invokeJoinpoint()</code>执行后控制台打印内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onBefore：test args:[ok]</span><br><span class="line">invoke test...</span><br></pre></td></tr></table></figure><p>接着从<code>MethodBeforeAdviceInterceptor.invoke</code>方法返回，程序回到<code>AspectJAfterAdvice.invoke</code>方法：</p><img src="/blog/SpringAOP%E5%8E%9F%E7%90%86/AspectJAfterAdvice_invokeAdviceMethod.png" class=""><p>继续执行后置通知逻辑，控制台打印内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onBefore：test args:[ok]</span><br><span class="line">invoke test...</span><br><span class="line">onAfter：test args:[ok]</span><br></pre></td></tr></table></figure><p><code>AspectJAfterAdvice.invoke</code>方法执行结束出栈，程序回到<code>AfterReturningAdviceInterceptor.invoke</code>方法：</p><img src="/blog/SpringAOP%E5%8E%9F%E7%90%86/AfterReturningAdviceInterceptor_afterReturning.png" class=""><p>继续执行返回通知逻辑，控制台打印内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">onBefore：test args:[ok]</span><br><span class="line">invoke test...</span><br><span class="line">onAfter：test args:[ok]</span><br><span class="line">afterReturning：test args:[ok] result:ok</span><br></pre></td></tr></table></figure><p><code>AfterReturningAdviceInterceptor.invoke</code>方法执行结束出栈，程序回到<code>AspectJAfterThrowingAdvice.invoke</code>方法。此时方法执行未抛出异常，正常返回执行结果。假如方法执行抛出异常则跳过执行<code>afterReturning</code>返回通知，转而执行异常通知：</p><img src="/blog/SpringAOP%E5%8E%9F%E7%90%86/AspectJAfterThrowingAdvice_invokeAdviceMethod.png" class=""><p><code>AspectJAfterThrowingAdvice.invoke</code>方法执行结束出栈，程序回到<code>ExposeInvocationInterceptor.invoke</code>方法，整个 AOP 的拦截器链调用也随之结束。我们已经成功在目标方法的各个执行时期织入了通知方法。</p><p>下面用一张图总结拦截器链调用过程：</p><img src="/blog/SpringAOP%E5%8E%9F%E7%90%86/spring_aop.png" class="">]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Spring-AOP-原理&quot;&gt;&lt;a href=&quot;#Spring-AOP-原理&quot; class=&quot;headerlink&quot; title=&quot;Spring AOP 原理&quot;&gt;&lt;/a&gt;Spring AOP 原理&lt;/h2&gt;&lt;h3 id=&quot;AOP-概念&quot;&gt;&lt;a href=&quot;#AOP-概念&quot; class=&quot;headerlink&quot; title=&quot;AOP 概念&quot;&gt;&lt;/a&gt;AOP 概念&lt;/h3&gt;&lt;p&gt;AOP(Aspect Oriented Programming)是一种面向切面的编程思想，是面向对象（OOP）编程的一种补充和完善。它通过预编译和运行期动态代理，实现在不修改源代码的情况下给程序动态统一的添加额外的功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;切面（&lt;code&gt;Aspect&lt;/code&gt;）：切面将多个类的通用行为封装成可重用的模块，该模块含有一组 API 提供横切功能。&lt;/li&gt;
&lt;li&gt;连接点（&lt;code&gt;JoinPoint&lt;/code&gt;）：连接点表示切面将会被织入到目标对象的哪个位置。&lt;/li&gt;
&lt;li&gt;切入点（&lt;code&gt;Pointcut&lt;/code&gt;）：切入点是一个或一组连接点，通知将在这些位置执行。可以通过切点表达式指明。&lt;/li&gt;
&lt;li&gt;通知（&lt;code&gt;Advice&lt;/code&gt;）：通知包括以下几种类型待织入到目标类中的切面代码。&lt;ul&gt;
&lt;li&gt;前置通知（Before）：在连接点之前执行。&lt;/li&gt;
&lt;li&gt;环绕通知（Around）：在连接点之前和之后执行。&lt;/li&gt;
&lt;li&gt;返回通知（After Returning）：在连接点正常返回后执行。&lt;/li&gt;
&lt;li&gt;异常通知（After Throwing）：在连接点抛出异常后执行。&lt;/li&gt;
&lt;li&gt;后置通知（After）：在连接点之后执行（不管是正常返回还是抛出异常）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;织入（&lt;code&gt;Weaving&lt;/code&gt;）：织入是将切面代码编织到目标对象中的过程，可以发生在编译时、加载时或运行时。Spring AOP 以动态代理技术为主进行织入。&lt;/li&gt;
&lt;li&gt;引入（&lt;code&gt;Introduction&lt;/code&gt;）：引入允许我们在已存在的类中增加新的方法和属性。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="http://xiaojiaC.github.io/blog/categories/JAVA/"/>
    
      <category term="Spring" scheme="http://xiaojiaC.github.io/blog/categories/JAVA/Spring/"/>
    
    
      <category term="spring" scheme="http://xiaojiaC.github.io/blog/tags/spring/"/>
    
      <category term="spring core" scheme="http://xiaojiaC.github.io/blog/tags/spring-core/"/>
    
  </entry>
  
  <entry>
    <title>Spring如何解决循环依赖？</title>
    <link href="http://xiaojiac.github.io/blog/Spring%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96.html"/>
    <id>http://xiaojiac.github.io/blog/Spring%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96.html</id>
    <published>2023-11-01T15:31:11.000Z</published>
    <updated>2023-12-29T07:52:06.640Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-如何解决循环依赖？"><a href="#Spring-如何解决循环依赖？" class="headerlink" title="Spring 如何解决循环依赖？"></a>Spring 如何解决循环依赖？</h2><p>所谓循环依赖是指：<code>BeanA</code>对象的创建依赖于<code>BeanB</code>，<code>BeanB</code>对象的创建也依赖于<code>BeanA</code>，这就造成了死循环，如果不做处理的话势必会造成栈溢出。Spring 通过<strong>提前曝光机制，利用三级缓存</strong>解决循环依赖问题。本文从 Spring 源码入手，剖析最常见的普通 Bean 与普通 Bean 之间循环依赖的解决之道。</p><h3 id="getBean"><a href="#getBean" class="headerlink" title="getBean"></a><code>getBean</code></h3><p>我们先从<code>getBean</code>源码入手，熟悉下 Bean 创建过程（源码仅贴相关部分）。</p><a id="more"></a><figure class="highlight java"><figcaption><span>org.springframework.beans.factory.support.AbstractBeanFactory.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractBeanFactory</span> <span class="keyword">extends</span> <span class="title">FactoryBeanRegistrySupport</span> <span class="keyword">implements</span> <span class="title">ConfigurableBeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> doGetBean(name, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">doGetBean</span><span class="params">(String name, @Nullable Class&lt;T&gt; requiredType,</span></span></span><br><span class="line"><span class="function"><span class="params">            @Nullable Object[] args, <span class="keyword">boolean</span> typeCheckOnly)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取Bean名称</span></span><br><span class="line">        String beanName = transformedBeanName(name);</span><br><span class="line">        Object bean;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从一二三级缓存中依次获取目标Bean实例</span></span><br><span class="line">        Object sharedInstance = getSingleton(beanName);</span><br><span class="line">        <span class="keyword">if</span> (sharedInstance != <span class="keyword">null</span> &amp;&amp; args == <span class="keyword">null</span>) &#123;</span><br><span class="line">            ......</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 不为空，则进行后续处理并返回</span></span><br><span class="line">            bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 从缓存中没有获取到Bean实例</span></span><br><span class="line">            ......</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ......</span><br><span class="line">                RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">                ......</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 目标Bean是单实例Bean</span></span><br><span class="line">                <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">                    sharedInstance = getSingleton(beanName, () -&gt; &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> createBean(beanName, mbd, args); <span class="comment">// 创建Bean实例</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">                            ......</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="comment">// 后续处理并返回</span></span><br><span class="line">                    bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">                &#125;</span><br><span class="line">                ......</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">                ......</span><br><span class="line">                <span class="keyword">throw</span> ex;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ......</span><br><span class="line">        <span class="keyword">return</span> (T) bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>doGetBean</code>方法中先通过<code>getSingleton(String beanName)</code>方法依次从一二三级缓存中获取 Bean 实例，如果不为空则进行后续处理后返回；如果为空，则通过 <code>getSingleton(String beanName, ObjectFactory&lt;?&gt; singletonFactory)</code>方法创建 Bean 实例并进行后续处理后返回。</p><p>这两个方法都是<code>AbstractBeanFactory</code>父类<code>DefaultSingletonBeanRegistry</code>中的方法：</p><img src="/blog/Spring%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/AbstractBeanFactory.png" class="" title="AbstractBeanFactory类层级关系图"><h4 id="getSingleton-String-beanName"><a href="#getSingleton-String-beanName" class="headerlink" title="getSingleton(String beanName)"></a><code>getSingleton(String beanName)</code></h4><figure class="highlight java"><figcaption><span>org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSingletonBeanRegistry</span> <span class="keyword">extends</span> <span class="title">SimpleAliasRegistry</span> <span class="keyword">implements</span> <span class="title">SingletonBeanRegistry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Cache of singleton objects: bean name to bean instance. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; singletonObjects = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">256</span>); <span class="comment">// 一级缓存</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Cache of singleton factories: bean name to ObjectFactory. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>); <span class="comment">// 三级缓存</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Cache of early singleton objects: bean name to bean instance. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; earlySingletonObjects = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">16</span>); <span class="comment">// 二级缓存</span></span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getSingleton</span><span class="params">(String beanName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSingleton(beanName, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">getSingleton</span><span class="params">(String beanName, <span class="keyword">boolean</span> allowEarlyReference)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 从一级缓存中获取目标Bean实例</span></span><br><span class="line">        Object singletonObject = <span class="keyword">this</span>.singletonObjects.get(beanName);</span><br><span class="line">        <span class="comment">// 如果没有获取到，并且该Bean处于正在创建中的状态时</span></span><br><span class="line">        <span class="keyword">if</span> (singletonObject == <span class="keyword">null</span> &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">            <span class="comment">// 从二级缓存获取目标Bean实例</span></span><br><span class="line">            singletonObject = <span class="keyword">this</span>.earlySingletonObjects.get(beanName);</span><br><span class="line">            <span class="comment">// 如果没有获取到，并且允许提前曝光的话</span></span><br><span class="line">            <span class="keyword">if</span> (singletonObject == <span class="keyword">null</span> &amp;&amp; allowEarlyReference) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="keyword">this</span>.singletonObjects) &#123;</span><br><span class="line">                    <span class="comment">// 在锁内重新从一级缓存中查找</span></span><br><span class="line">                    singletonObject = <span class="keyword">this</span>.singletonObjects.get(beanName);</span><br><span class="line">                    <span class="keyword">if</span> (singletonObject == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 重新从二级缓存中查找</span></span><br><span class="line">                        singletonObject = <span class="keyword">this</span>.earlySingletonObjects.get(beanName);</span><br><span class="line">                        <span class="keyword">if</span> (singletonObject == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="comment">// 从三级缓存中取出目标Bean工厂对象</span></span><br><span class="line">                            ObjectFactory&lt;?&gt; singletonFactory = <span class="keyword">this</span>.singletonFactories.get(beanName);</span><br><span class="line">                            <span class="keyword">if</span> (singletonFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                <span class="comment">// 工厂对象不为空，则通过调用getObject方法创建Bean实例</span></span><br><span class="line">                                singletonObject = singletonFactory.getObject();</span><br><span class="line">                                <span class="comment">// 放到二级缓存中</span></span><br><span class="line">                                <span class="keyword">this</span>.earlySingletonObjects.put(beanName, singletonObject);</span><br><span class="line">                                <span class="comment">// 删除对应的三级缓存</span></span><br><span class="line">                                <span class="keyword">this</span>.singletonFactories.remove(beanName);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singletonObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三级缓存指的是<code>DefaultSingletonBeanRegistry</code>类的三个成员变量：</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>singletonObjects</code></td><td>一级缓存，key 为 Bean 名称，value 为 Bean 实例。这里的 Bean 实例指的是已经完全创建好的，即已经经历实例化-&gt;属性填充-&gt;初始化以及各种后置处理过程的 Bean，可直接使用。</td></tr><tr><td><code>earlySingletonObjects</code></td><td>二级缓存，key 为 Bean 名称，value 为 Bean 实例。这里的 Bean 实例指的是仅完成实例化的 Bean，还未进行属性填充等后续操作。用于提前曝光，供别的 Bean 引用，解决循环依赖。</td></tr><tr><td><code>singletonFactories</code></td><td>三级缓存，key 为 Bean 名称，value 为 Bean 工厂。在 Bean 实例化后，属性填充之前，如果允许提前曝光，Spring 会把该 Bean 转换成 Bean 工厂并加入到三级缓存。在需要引用提前曝光对象时再通过工厂对象的<code>getObject()</code>方法获取。</td></tr></tbody></table><p>如果通过一二三级缓存的查找都没有找到目标 Bean 实例，则开始执行创建。</p><h4 id="getSingleton-String-beanName-ObjectFactory-lt-gt-singletonFactory"><a href="#getSingleton-String-beanName-ObjectFactory-lt-gt-singletonFactory" class="headerlink" title="getSingleton(String beanName, ObjectFactory&lt;?&gt; singletonFactory)"></a><code>getSingleton(String beanName, ObjectFactory&lt;?&gt; singletonFactory)</code></h4><figure class="highlight java"><figcaption><span>org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSingletonBeanRegistry</span> <span class="keyword">extends</span> <span class="title">SimpleAliasRegistry</span> <span class="keyword">implements</span> <span class="title">SingletonBeanRegistry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getSingleton</span><span class="params">(String beanName, ObjectFactory&lt;?&gt; singletonFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.singletonObjects) &#123;</span><br><span class="line">            <span class="comment">// 从一级缓存获取</span></span><br><span class="line">            Object singletonObject = <span class="keyword">this</span>.singletonObjects.get(beanName);</span><br><span class="line">            <span class="keyword">if</span> (singletonObject == <span class="keyword">null</span>) &#123; <span class="comment">// 为空则继续</span></span><br><span class="line">                ......</span><br><span class="line">                <span class="comment">// 将当前Bean名称添加到正在创建Bean的集合（singletonsCurrentlyInCreation）中</span></span><br><span class="line">                beforeSingletonCreation(beanName);</span><br><span class="line">                <span class="keyword">boolean</span> newSingleton = <span class="keyword">false</span>;</span><br><span class="line">                ......</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 通过函数式接口创建Bean实例</span></span><br><span class="line">                    singletonObject = singletonFactory.getObject();</span><br><span class="line">                    <span class="comment">// 创建后该实例已经经历实例化-&gt;属性填充-&gt;初始化以及各种后置处理过程，可直接使用</span></span><br><span class="line">                    newSingleton = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (IllegalStateException ex) &#123;</span><br><span class="line">                   ......</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">finally</span> &#123;</span><br><span class="line">                    ......</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (newSingleton) &#123;</span><br><span class="line">                    <span class="comment">// 添加到一级缓存中</span></span><br><span class="line">                    addSingleton(beanName, singletonObject);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> singletonObject;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addSingleton</span><span class="params">(String beanName, Object singletonObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.singletonObjects) &#123;</span><br><span class="line">            <span class="comment">// 添加到一级缓存</span></span><br><span class="line">            <span class="keyword">this</span>.singletonObjects.put(beanName, singletonObject);</span><br><span class="line">            <span class="comment">// 删除对应的二三级缓存</span></span><br><span class="line">            <span class="keyword">this</span>.singletonFactories.remove(beanName);</span><br><span class="line">            <span class="keyword">this</span>.earlySingletonObjects.remove(beanName);</span><br><span class="line">            <span class="keyword">this</span>.registeredSingletons.add(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码重点关注<code>singletonFactory.getObject()</code>，<code>singletonFactory</code>是一个函数式接口，对应<code>AbstractBeanFactory</code>的<code>doGetBean</code>方法中的 lambda 表达式：</p><figure class="highlight java"><figcaption><span>org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sharedInstance = getSingleton(beanName, () -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 创建Bean实例</span></span><br><span class="line">        <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其内通过调用<code>createBean</code>方法创建 Bean 实例。该方法为抽象方法，由<code>AbstractBeanFactory</code>子类<code>AbstractAutowireCapableBeanFactory</code>实现。</p><h3 id="createBean"><a href="#createBean" class="headerlink" title="createBean"></a><code>createBean</code></h3><figure class="highlight java"><figcaption><span>org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractAutowireCapableBeanFactory</span> <span class="keyword">extends</span> <span class="title">AbstractBeanFactory</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">AutowireCapableBeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">createBean</span><span class="params">(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line">        ......</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建Bean实例</span></span><br><span class="line">            Object beanInstance = doCreateBean(beanName, mbdToUse, args);</span><br><span class="line">            <span class="keyword">return</span> beanInstance;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (BeanCreationException | ImplicitlyAppearedSingletonException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            ......</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">doCreateBean</span><span class="params">(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line"></span><br><span class="line">        BeanWrapper instanceWrapper = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        ......</span><br><span class="line">        <span class="comment">// 实例化Bean</span></span><br><span class="line">        <span class="keyword">if</span> (instanceWrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class="line">        &#125;</span><br><span class="line">        Object bean = instanceWrapper.getWrappedInstance();</span><br><span class="line"></span><br><span class="line">        ......</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (mbd.postProcessingLock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mbd.postProcessed) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 执行MergedBeanDefinitionPostProcessor类型后置处理器</span></span><br><span class="line">                    applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                    ......</span><br><span class="line">                &#125;</span><br><span class="line">                mbd.postProcessed = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果该Bean是单例，并且allowCircularReferences属性为true（标识允许循环依赖的出现）以及该Bean正在创建中，</span></span><br><span class="line">        <span class="comment">// earlySingletonExposure就为true，标识允许单例Bean提前暴露原始对象引用（仅实例化）</span></span><br><span class="line">        <span class="keyword">boolean</span> earlySingletonExposure = (mbd.isSingleton() &amp;&amp; <span class="keyword">this</span>.allowCircularReferences &amp;&amp;</span><br><span class="line">                isSingletonCurrentlyInCreation(beanName));</span><br><span class="line">        <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">            <span class="comment">// 添加到单实例工厂集合中（即三级缓存），该方法第二个参数类型为ObjectFactory&lt;?&gt; singletonFactory，</span></span><br><span class="line">            <span class="comment">// 前面提到过它是一个函数式接口，这里用lambda表达式() -&gt; getEarlyBeanReference(beanName, mbd, bean)表示</span></span><br><span class="line">            addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object exposedObject = bean;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 属性赋值操作</span></span><br><span class="line">            populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">            <span class="comment">// 初始化Bean（初始化操作主要包括 执行XxxAware注入，BeanPostProcessor初始化前/后置处理</span></span><br><span class="line">            <span class="comment">// 及执行InitializingBean或自定义初始化方法）</span></span><br><span class="line">            exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            ......</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果earlySingletonExposure为true</span></span><br><span class="line">        <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">            <span class="comment">// 第二个参数为false表示仅从一级和二级缓存中获取Bean实例</span></span><br><span class="line">            Object earlySingletonReference = getSingleton(beanName, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (earlySingletonReference != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (exposedObject == bean) &#123;</span><br><span class="line">                    <span class="comment">// 如果从一级和二级缓存中获取Bean实例不为空，并且exposedObject == bean的话，</span></span><br><span class="line">                    <span class="comment">// 将earlySingletonReference赋值给exposedObject返回</span></span><br><span class="line">                    exposedObject = earlySingletonReference;</span><br><span class="line">                &#125;</span><br><span class="line">                ......</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ......</span><br><span class="line">        <span class="comment">// 返回最终Bean实例</span></span><br><span class="line">        <span class="keyword">return</span> exposedObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">getEarlyBeanReference</span><span class="params">(String beanName, RootBeanDefinition mbd, Object bean)</span> </span>&#123;</span><br><span class="line">        Object exposedObject = bean;</span><br><span class="line">        <span class="keyword">if</span> (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">            <span class="comment">// SmartInstantiationAwareBeanPostProcessor类型后置处理，常见的场景为AOP代理</span></span><br><span class="line">            <span class="keyword">for</span> (SmartInstantiationAwareBeanPostProcessor bp : getBeanPostProcessorCache().smartInstantiationAware) &#123;</span><br><span class="line">                exposedObject = bp.getEarlyBeanReference(exposedObject, beanName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> exposedObject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>光看源码有点抽象，下面我们通过一个示例（普通单例 Bean 间循环依赖）来加深理解。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>新建 SpringBoot 项目，<code>pom.xml</code>引入如下依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><p>新建<code>CircularRefTest</code>类：</p><figure class="highlight java"><figcaption><span>CircularRefTest.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircularReferenceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(BeanA<span class="class">.<span class="keyword">class</span>, <span class="title">BeanB</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        BeanA beanA = context.getBean(BeanA<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        BeanB beanB = context.getBean(BeanB<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        BeanB beanBInBeanA = beanA.getBeanB();</span><br><span class="line">        BeanA beanAInBeanB = beanB.getBeanA();</span><br><span class="line">        System.out.println(beanA);</span><br><span class="line">        System.out.println(beanB);</span><br><span class="line">        System.out.println(beanB == beanBInBeanA);</span><br><span class="line">        System.out.println(beanA == beanAInBeanB);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BeanA</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BeanB beanB;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BeanB <span class="title">getBeanB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beanB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanB</span><span class="params">(BeanB beanB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beanB = beanB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BeanB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BeanA beanA;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BeanA <span class="title">getBeanA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beanA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanA</span><span class="params">(BeanA beanA)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beanA = beanA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码通过<code>AnnotationConfigApplicationContext</code>创建了 IOC 容器，并先后注册了相互依赖的<code>BeanA</code>和<code>BeanB</code>，程序输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">com.example.BeanA@f4168b8</span><br><span class="line">com.example.BeanB@3bd94634</span><br><span class="line">true</span><br><span class="line">true</span><br></pre></td></tr></table></figure><h4 id="原理剖析"><a href="#原理剖析" class="headerlink" title="原理剖析"></a>原理剖析</h4><img src="/blog/Spring%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/CircularRefTest.png" class="" title="getBean(BeanA.class)序列图"><p>上面的例子是基于属性注入的情况，假如存在构造器注入情况下的循环依赖，Spring 将没办法解决。这是因为对象的提前曝光时机发生在对象实例化之后，而构造器注入时机为对象实例化时，所以此时还未进行提前曝光操作，循环依赖也就没办法解决了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Spring-如何解决循环依赖？&quot;&gt;&lt;a href=&quot;#Spring-如何解决循环依赖？&quot; class=&quot;headerlink&quot; title=&quot;Spring 如何解决循环依赖？&quot;&gt;&lt;/a&gt;Spring 如何解决循环依赖？&lt;/h2&gt;&lt;p&gt;所谓循环依赖是指：&lt;code&gt;BeanA&lt;/code&gt;对象的创建依赖于&lt;code&gt;BeanB&lt;/code&gt;，&lt;code&gt;BeanB&lt;/code&gt;对象的创建也依赖于&lt;code&gt;BeanA&lt;/code&gt;，这就造成了死循环，如果不做处理的话势必会造成栈溢出。Spring 通过&lt;strong&gt;提前曝光机制，利用三级缓存&lt;/strong&gt;解决循环依赖问题。本文从 Spring 源码入手，剖析最常见的普通 Bean 与普通 Bean 之间循环依赖的解决之道。&lt;/p&gt;
&lt;h3 id=&quot;getBean&quot;&gt;&lt;a href=&quot;#getBean&quot; class=&quot;headerlink&quot; title=&quot;getBean&quot;&gt;&lt;/a&gt;&lt;code&gt;getBean&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;我们先从&lt;code&gt;getBean&lt;/code&gt;源码入手，熟悉下 Bean 创建过程（源码仅贴相关部分）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="http://xiaojiaC.github.io/blog/categories/JAVA/"/>
    
      <category term="Spring" scheme="http://xiaojiaC.github.io/blog/categories/JAVA/Spring/"/>
    
    
      <category term="java" scheme="http://xiaojiaC.github.io/blog/tags/java/"/>
    
      <category term="spring" scheme="http://xiaojiaC.github.io/blog/tags/spring/"/>
    
      <category term="spring core" scheme="http://xiaojiaC.github.io/blog/tags/spring-core/"/>
    
  </entry>
  
  <entry>
    <title>解释器模式</title>
    <link href="http://xiaojiac.github.io/blog/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://xiaojiac.github.io/blog/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F.html</id>
    <published>2023-10-29T11:22:21.000Z</published>
    <updated>2023-12-29T07:52:06.632Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h2><h3 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h3><p>给定一个语言，定义它的文法的一种表示，并定义一个解释器，使用该解释器来解释语言中的句子。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>可以将一个需要解释执行的语言中的语句表示为一棵抽象语法树。</li><li>一些重复出现的问题可以用一种简单的语言进行表达。</li><li>一个语言的文法较为简单。对于复杂的文法，文法类层次结构将变得很庞大且难以管理，在这种情况下，解析器生成器之类的工具是更好的选择。他们可以在不构建抽象语法树的情况下解释表达式，这可以节省空间并可能节省时间。</li><li>……</li></ul><a id="more"></a><h3 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html" target="_blank" rel="noopener">java.util.regex.Pattern</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/text/Normalizer.html" target="_blank" rel="noopener">java.text.Normalizer</a></li><li><a href="http://docs.oracle.com/javaee/7/api/javax/el/ELResolver.html" target="_blank" rel="noopener">javax.el.ELResolver</a></li><li>领域特定语言（DSL）</li><li>正则表达式/规则引擎</li><li>自然语言处理</li></ul><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算: 2*(1+5)/3 = ?</span></span><br><span class="line"><span class="comment"> * 抽象语法树:</span></span><br><span class="line"><span class="comment"> *     /</span></span><br><span class="line"><span class="comment"> *    / \</span></span><br><span class="line"><span class="comment"> *   3   *</span></span><br><span class="line"><span class="comment"> *      / \</span></span><br><span class="line"><span class="comment"> *     2   +</span></span><br><span class="line"><span class="comment"> *        / \</span></span><br><span class="line"><span class="comment"> *       1   5</span></span><br><span class="line"><span class="comment"> * 后缀表示法: 3 2 1 5 + * /</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">interpret</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NumberExpression</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NumberExpression</span><span class="params">(String number)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number=Integer.parseInt(number);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Expression leftExp;</span><br><span class="line">    <span class="keyword">private</span> Expression rightExp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AddExpression</span><span class="params">(Expression leftExp, Expression rightExp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.leftExp = leftExp;</span><br><span class="line">        <span class="keyword">this</span>.rightExp = rightExp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> leftExp.interpret() + rightExp.interpret();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"+"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubtractExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Expression leftExp;</span><br><span class="line">    <span class="keyword">private</span> Expression rightExp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SubtractExpression</span><span class="params">(Expression leftExp, Expression rightExp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.leftExp = leftExp;</span><br><span class="line">        <span class="keyword">this</span>.rightExp = rightExp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> leftExp.interpret() - rightExp.interpret();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"-"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiplyExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Expression leftExp;</span><br><span class="line">    <span class="keyword">private</span> Expression rightExp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MultiplyExpression</span><span class="params">(Expression leftExp, Expression rightExp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.leftExp = leftExp;</span><br><span class="line">        <span class="keyword">this</span>.rightExp = rightExp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> leftExp.interpret() * rightExp.interpret();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"*"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DivideExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Expression leftExp;</span><br><span class="line">    <span class="keyword">private</span> Expression rightExp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DivideExpression</span><span class="params">(Expression leftExp, Expression rightExp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.leftExp = leftExp;</span><br><span class="line">        <span class="keyword">this</span>.rightExp = rightExp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> leftExp.interpret() / rightExp.interpret();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"除数不能为0"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpParserUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isOperator</span><span class="params">(String symbol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> symbol.equals(<span class="string">"+"</span>) || symbol.equals(<span class="string">"-"</span>) || symbol.equals(<span class="string">"*"</span>) || symbol.equals(<span class="string">"/"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Expression <span class="title">getExpressionObject</span><span class="params">(Expression firstExp, Expression secondExp, String symbol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (symbol) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> AddExpression(firstExp, secondExp);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"-"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> SubtractExpression(firstExp, secondExp);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"*"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> MultiplyExpression(firstExp, secondExp);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"/"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> DivideExpression(firstExp, secondExp);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Invalid symbol: "</span> + symbol);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpressionParser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Expression&gt; stack;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExpressionParser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">parse</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        String[] tokenList = str.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">for</span> (String symbol : tokenList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!ExpParserUtil.isOperator(symbol)) &#123;</span><br><span class="line">                Expression numberExp = <span class="keyword">new</span> NumberExpression(symbol);</span><br><span class="line">                stack.push(numberExp);</span><br><span class="line">                System.out.println(String.format(<span class="string">"数字入栈: %d"</span>, numberExp.interpret()));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ExpParserUtil.isOperator(symbol)) &#123;</span><br><span class="line">                Expression firstExp = stack.pop();</span><br><span class="line">                Expression secondExp = stack.pop();</span><br><span class="line">                System.out.println(String.format(<span class="string">"数字出栈 %d,%d"</span>,</span><br><span class="line">                        firstExp.interpret(), secondExp.interpret()));</span><br><span class="line">                Expression operator = ExpParserUtil.getExpressionObject(firstExp, secondExp, symbol);</span><br><span class="line">                System.out.println(String.format(<span class="string">"参与运算: %s"</span>, operator));</span><br><span class="line">                <span class="keyword">int</span> result = operator.interpret();</span><br><span class="line">                NumberExpression resultExpression = <span class="keyword">new</span> NumberExpression(result);</span><br><span class="line">                stack.push(resultExpression);</span><br><span class="line">                System.out.println(String.format(<span class="string">"结果入栈: %d"</span>, resultExpression.interpret()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.pop().interpret();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String input = <span class="string">"3 2 1 5 + * /"</span>;</span><br><span class="line">        ExpressionParser expressionParser = <span class="keyword">new</span> ExpressionParser();</span><br><span class="line">        <span class="keyword">int</span> result = expressionParser.parse(input);</span><br><span class="line">        System.out.println(<span class="string">"计算结果为："</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="">示例代码</a></p></blockquote><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><img src="/blog/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/interpreter_demo.png" class=""><img src="/blog/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/interpreter.png" class=""><p>解释器模式主要包含以下角色：</p><p>抽象表达式（<code>AbstractExpression</code>）：定义了一个解释操作的接口，该操作接受一个上下文作为参数。<br>终结符表达式（<code>TerminalExpression</code>）：实现了抽象表达式所定义的接口，用于处理文法规则中的终结符。<br>非终结符表达式（<code>NonTerminalExpression</code>）：实现了抽象表达式所定义的接口，用于处理文法规则中的非终结符。<br>上下文（<code>Context</code>）：包含解释器需要的全局信息和解释过程中的中间结果。<br>客户端（<code>Client</code>）：构建抽象语法树，并使用解释器对其进行解释。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;解释器模式&quot;&gt;&lt;a href=&quot;#解释器模式&quot; class=&quot;headerlink&quot; title=&quot;解释器模式&quot;&gt;&lt;/a&gt;解释器模式&lt;/h2&gt;&lt;h3 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot; title=&quot;意图&quot;&gt;&lt;/a&gt;意图&lt;/h3&gt;&lt;p&gt;给定一个语言，定义它的文法的一种表示，并定义一个解释器，使用该解释器来解释语言中的句子。&lt;/p&gt;
&lt;h3 id=&quot;适用场景&quot;&gt;&lt;a href=&quot;#适用场景&quot; class=&quot;headerlink&quot; title=&quot;适用场景&quot;&gt;&lt;/a&gt;适用场景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;可以将一个需要解释执行的语言中的语句表示为一棵抽象语法树。&lt;/li&gt;
&lt;li&gt;一些重复出现的问题可以用一种简单的语言进行表达。&lt;/li&gt;
&lt;li&gt;一个语言的文法较为简单。对于复杂的文法，文法类层次结构将变得很庞大且难以管理，在这种情况下，解析器生成器之类的工具是更好的选择。他们可以在不构建抽象语法树的情况下解释表达式，这可以节省空间并可能节省时间。&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://xiaojiaC.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="解释器模式" scheme="http://xiaojiaC.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="design patterns" scheme="http://xiaojiaC.github.io/blog/tags/design-patterns/"/>
    
      <category term="gof" scheme="http://xiaojiaC.github.io/blog/tags/gof/"/>
    
      <category term="behavioral" scheme="http://xiaojiaC.github.io/blog/tags/behavioral/"/>
    
      <category term="interpreter" scheme="http://xiaojiaC.github.io/blog/tags/interpreter/"/>
    
  </entry>
  
  <entry>
    <title>备忘录模式</title>
    <link href="http://xiaojiac.github.io/blog/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://xiaojiac.github.io/blog/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F.html</id>
    <published>2023-10-26T15:21:03.000Z</published>
    <updated>2023-12-29T07:52:06.624Z</updated>
    
    <content type="html"><![CDATA[<h2 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h2><h3 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h3><p>在不破坏封装性的前提下，捕获和保存一个对象的内部状态，以便在需要时恢复该对象到原先的状态。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>需要实现对象状态的撤销和恢复功能。</li><li>需要保存对象状态的历史快照。</li><li>……</li></ul><a id="more"></a><h3 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Date.html" target="_blank" rel="noopener">java.util.Date</a></li><li>版本控制系统</li><li>游戏进度存档</li></ul><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个简单的版本控制系统：它可以记录提交文件并跟踪每次提交的更改，可以列出所有提交并从特定提交恢复。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextFile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TextFile</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = UUID.randomUUID().toString();</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeContent</span><span class="params">(String updatedContent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = updatedContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TextFileMemento <span class="title">createSnapshot</span><span class="params">(<span class="keyword">int</span> version, String commitMsg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TextFileMemento(version, <span class="keyword">this</span>.id, <span class="keyword">this</span>.name, <span class="keyword">this</span>.content, commitMsg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restoreSnapshot</span><span class="params">(TextFileMemento memento)</span> </span>&#123;</span><br><span class="line">        writeContent(memento.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextFileMemento</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> version;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> String commitMsg;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime commitTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TextFileMemento</span><span class="params">(<span class="keyword">int</span> version, String id, String name, String content, String commitMsg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.version = version;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.commitMsg = commitMsg;</span><br><span class="line">        <span class="keyword">this</span>.commitTime = LocalDateTime.now();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextFileVersionManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;TextFileMemento&gt;&gt; states = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">TextFileVersionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">(TextFile file, String commitMsg)</span> </span>&#123;</span><br><span class="line">        List&lt;TextFileMemento&gt; snapshots = states.putIfAbsent(file.getId(),</span><br><span class="line">                <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;());</span><br><span class="line">        <span class="keyword">if</span> (snapshots == <span class="keyword">null</span>) &#123;</span><br><span class="line">            snapshots = states.get(file.getId());</span><br><span class="line">        &#125;</span><br><span class="line">        snapshots.add(file.createSnapshot(snapshots.size(), commitMsg));</span><br><span class="line">        System.out.println(<span class="string">"Commit created: "</span> + file.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(TextFile file)</span> </span>&#123;</span><br><span class="line">        List&lt;TextFileMemento&gt; commits = states.get(file.getId());</span><br><span class="line">        <span class="keyword">if</span> (commits == <span class="keyword">null</span> || commits.isEmpty()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"No commits found: "</span> + file.getName());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Commits found: "</span> + file.getName());</span><br><span class="line">            commits.stream().forEach(System.out::println);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">revert</span><span class="params">(TextFile file, <span class="keyword">int</span> version)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (version &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid version: "</span> + version);</span><br><span class="line">        &#125;</span><br><span class="line">        states.computeIfPresent(file.getId(), (fileId, commits) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (commits == <span class="keyword">null</span> || commits.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span> commits;</span><br><span class="line">            &#125;</span><br><span class="line">            TextFileMemento memento = commits.get(version);</span><br><span class="line">            file.restoreSnapshot(memento);</span><br><span class="line">            System.out.println(<span class="string">"Revert to version: "</span> + version);</span><br><span class="line">            <span class="keyword">return</span> commits.subList(<span class="number">0</span>, version);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TextFile file = <span class="keyword">new</span> TextFile(<span class="string">"test.txt"</span>);</span><br><span class="line">        file.writeContent(<span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line">        TextFileVersionManager.commit(file, <span class="string">"version 1"</span>);</span><br><span class="line">        TextFileVersionManager.log(file);</span><br><span class="line"></span><br><span class="line">        file.writeContent(<span class="string">"hello world!"</span>);</span><br><span class="line">        TextFileVersionManager.commit(file, <span class="string">"version 2"</span>);</span><br><span class="line">        TextFileVersionManager.log(file);</span><br><span class="line"></span><br><span class="line">        TextFileVersionManager.revert(file, <span class="number">0</span>);</span><br><span class="line">        TextFileVersionManager.log(file);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Current state of the file: "</span> + file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="">示例代码</a></p></blockquote><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><img src="/blog/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/memento_demo.png" class=""><img src="/blog/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/memento.png" class=""><p>备忘录模式主要包含以下角色：</p><p>发起人（<code>Originator</code>）：负责创建一个备忘录，用以记录当前时刻自身的内部状态，并可使用备忘录恢复内部状态。发起人可以根据需要决定备忘录存储自己的哪些内部状态。<br>备忘录（<code>Memento</code>）：负责存储发起人对象的内部状态，并可以防止发起人以外的其他对象访问备忘录。备忘录有两个接口：</p><pre><code>管理者只能看到备忘录的窄接口，它只能将备忘录传递给其他对象。发起人却可看到备忘录的宽接口，允许它访问返回到先前状态所需要的所有数据。</code></pre><p>管理者（<code>Caretaker</code>）：负责管理备忘录，不能对备忘录的内容进行访问或者操作。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;备忘录模式&quot;&gt;&lt;a href=&quot;#备忘录模式&quot; class=&quot;headerlink&quot; title=&quot;备忘录模式&quot;&gt;&lt;/a&gt;备忘录模式&lt;/h2&gt;&lt;h3 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot; title=&quot;意图&quot;&gt;&lt;/a&gt;意图&lt;/h3&gt;&lt;p&gt;在不破坏封装性的前提下，捕获和保存一个对象的内部状态，以便在需要时恢复该对象到原先的状态。&lt;/p&gt;
&lt;h3 id=&quot;适用场景&quot;&gt;&lt;a href=&quot;#适用场景&quot; class=&quot;headerlink&quot; title=&quot;适用场景&quot;&gt;&lt;/a&gt;适用场景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;需要实现对象状态的撤销和恢复功能。&lt;/li&gt;
&lt;li&gt;需要保存对象状态的历史快照。&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://xiaojiaC.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="备忘录模式" scheme="http://xiaojiaC.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="design patterns" scheme="http://xiaojiaC.github.io/blog/tags/design-patterns/"/>
    
      <category term="gof" scheme="http://xiaojiaC.github.io/blog/tags/gof/"/>
    
      <category term="behavioral" scheme="http://xiaojiaC.github.io/blog/tags/behavioral/"/>
    
      <category term="memento" scheme="http://xiaojiaC.github.io/blog/tags/memento/"/>
    
  </entry>
  
  <entry>
    <title>中介者模式</title>
    <link href="http://xiaojiac.github.io/blog/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://xiaojiac.github.io/blog/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F.html</id>
    <published>2023-10-24T14:21:11.000Z</published>
    <updated>2023-12-29T07:52:06.624Z</updated>
    
    <content type="html"><![CDATA[<h2 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h2><h3 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h3><p>定义一个中介角色来封装一系列对象之间的交互，使原有对象之间的耦合松散，且可以独立地改变它们之间的交互。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>系统对象之间存在复杂的引用关系，系统结构混乱且难以理解。</li><li>一个对象由于引用了其他很多对象并且直接和这些对象通信，导致难以复用该对象。</li><li>想通过一个中间类来封装多个类的行为，而又不想生成太多的子类。</li><li>……</li></ul><a id="more"></a><h3 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executor.html#execute-java.lang.Runnable-" target="_blank" rel="noopener">java.util.concurrent.Executor#execute()</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html" target="_blank" rel="noopener">java.util.concurrent.ExecutorService#submit()/invokeXXX()</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledExecutorService.html" target="_blank" rel="noopener">java.util.concurrent.ScheduledExecutorService#scheduleXXX()</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#invoke-java.lang.Object-java.lang.Object...-" target="_blank" rel="noopener">java.lang.reflect.Method#invoke()</a></li><li>房产中介</li><li>电脑主板</li></ul><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 有一个聊天室，陌生的人们在这里沟通交友。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ChatMediator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">joinUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">broadcastMessage</span><span class="params">(String msg, User user)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatMediatorImpl</span> <span class="keyword">implements</span> <span class="title">ChatMediator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">joinUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.users.add(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">broadcastMessage</span><span class="params">(String msg, User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (User u : <span class="keyword">this</span>.users) &#123;</span><br><span class="line">            <span class="keyword">if</span> (u != user) &#123;</span><br><span class="line">                u.receiveMessage(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> ChatMediator mediator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, ChatMediator mediator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.mediator = mediator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChatMediator <span class="title">getChatMediator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mediator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String msg)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(String msg)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bob</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bob</span><span class="params">(String name, ChatMediator mediator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, mediator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">"发送消息: "</span> + msg);</span><br><span class="line">        getChatMediator().broadcastMessage(msg, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">"收到消息: "</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sunny</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sunny</span><span class="params">(String name, ChatMediator mediator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, mediator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">"发送信息: "</span> + msg);</span><br><span class="line">        getChatMediator().broadcastMessage(msg, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">"收到信息: "</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ChatMediator mediator = <span class="keyword">new</span> ChatMediatorImpl();</span><br><span class="line"></span><br><span class="line">        User bob = <span class="keyword">new</span> Bob(<span class="string">"Bob"</span>, mediator);</span><br><span class="line">        User sunny = <span class="keyword">new</span> Sunny(<span class="string">"Sunny"</span>, mediator);</span><br><span class="line"></span><br><span class="line">        mediator.joinUser(bob);</span><br><span class="line">        mediator.joinUser(sunny);</span><br><span class="line"></span><br><span class="line">        bob.sendMessage(<span class="string">"hello"</span>);</span><br><span class="line">        sunny.sendMessage(<span class="string">"hi~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="">示例代码</a></p></blockquote><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><img src="/blog/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/mediator_demo.png" class=""><img src="/blog/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/mediator.png" class=""><p>中介者模式主要包含以下角色：</p><p>抽象中介者（<code>Mediator</code>）：定义了与各同事类之间进行通信的方法。<br>具体中介者（<code>ConcreteMediator</code>）：抽象中介者的子类，协调各个同事对象实现协作行为，维持对各个同事对象的引用。<br>抽象同事类（<code>Colleague</code>）：定义各个同事类的公有方法，并声明一些抽象方法来提供子类实现，同事维持一个抽象中介者的引用，子类可以通过该引用与中介者通信。<br>具体同事类（<code>ConcreteColleague</code>）：抽象同事的子类，每一个同事对象在需要和其他同事对象通信时，先与中介者通信，通过中介者来间接完成与其他同事类的通信，在具体同事类中实现了在抽象同事类中声明的抽象方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;中介者模式&quot;&gt;&lt;a href=&quot;#中介者模式&quot; class=&quot;headerlink&quot; title=&quot;中介者模式&quot;&gt;&lt;/a&gt;中介者模式&lt;/h2&gt;&lt;h3 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot; title=&quot;意图&quot;&gt;&lt;/a&gt;意图&lt;/h3&gt;&lt;p&gt;定义一个中介角色来封装一系列对象之间的交互，使原有对象之间的耦合松散，且可以独立地改变它们之间的交互。&lt;/p&gt;
&lt;h3 id=&quot;适用场景&quot;&gt;&lt;a href=&quot;#适用场景&quot; class=&quot;headerlink&quot; title=&quot;适用场景&quot;&gt;&lt;/a&gt;适用场景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;系统对象之间存在复杂的引用关系，系统结构混乱且难以理解。&lt;/li&gt;
&lt;li&gt;一个对象由于引用了其他很多对象并且直接和这些对象通信，导致难以复用该对象。&lt;/li&gt;
&lt;li&gt;想通过一个中间类来封装多个类的行为，而又不想生成太多的子类。&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://xiaojiaC.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="中介者模式" scheme="http://xiaojiaC.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="design patterns" scheme="http://xiaojiaC.github.io/blog/tags/design-patterns/"/>
    
      <category term="gof" scheme="http://xiaojiaC.github.io/blog/tags/gof/"/>
    
      <category term="behavioral" scheme="http://xiaojiaC.github.io/blog/tags/behavioral/"/>
    
      <category term="mediator" scheme="http://xiaojiaC.github.io/blog/tags/mediator/"/>
    
  </entry>
  
  <entry>
    <title>访问者模式</title>
    <link href="http://xiaojiac.github.io/blog/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://xiaojiac.github.io/blog/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F.html</id>
    <published>2023-10-19T14:33:06.000Z</published>
    <updated>2023-12-29T07:52:06.632Z</updated>
    
    <content type="html"><![CDATA[<h2 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h2><h3 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h3><p>表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素类的前提下定义作用于这些元素的新操作。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>定义对象结构的类很少变化，但是你经常想在结构上定义新的操作。</li><li>对象结构包含许多具有不同接口的对象类，并且你希望根据这些对象的具体类对这些对象执行操作。</li><li>需要对对象结构中的对象执行许多不同且不相关的操作，并且你想避免使用这些操作“污染”它们的类。</li><li>……</li></ul><a id="more"></a><h3 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/javax/lang/model/element/AnnotationValue.html" target="_blank" rel="noopener">javax.lang.model.element.AnnotationValue</a> &amp; <a href="http://docs.oracle.com/javase/8/docs/api/javax/lang/model/element/AnnotationValueVisitor.html" target="_blank" rel="noopener">AnnotationValueVisitor</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/javax/lang/model/element/Element.html" target="_blank" rel="noopener">javax.lang.model.element.Element</a> &amp; <a href="http://docs.oracle.com/javase/8/docs/api/javax/lang/model/element/ElementVisitor.html" target="_blank" rel="noopener">ElementVisitor</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/nio/file/FileVisitor.html" target="_blank" rel="noopener">FileVisitor</a></li><li><a href="https://www.javassist.org/" target="_blank" rel="noopener">javassist</a> <a href="https://www.javassist.org/html/javassist/bytecode/annotation/MemberValueVisitor.html" target="_blank" rel="noopener">MemberValueVisitor</a></li><li><a href="https://asm.ow2.io/" target="_blank" rel="noopener">asm</a> <a href="https://asm.ow2.io/javadoc/org/objectweb/asm/ClassVisitor.html" target="_blank" rel="noopener">ClassVisitor</a></li><li><a href="https://bytebuddy.net/" target="_blank" rel="noopener">byte-buddy</a> <a href="https://javadoc.io/static/net.bytebuddy/byte-buddy/1.14.9/net/bytebuddy/asm/AsmVisitorWrapper.html" target="_blank" rel="noopener">AsmVisitorWrapper</a></li></ul><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 考虑有一个带有军队单位的树形结构。指挥官下有两名中士，每名中士下有三名士兵。</span></span><br><span class="line"><span class="comment"> * 基于这个层级结构实现访问者模式，我们可以轻松创建与指挥官，中士，士兵或所有人员互动的新对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Unit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Unit[] children;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Unit</span><span class="params">(Unit... children)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.children = children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(UnitVisitor visitor)</span> </span>&#123;</span><br><span class="line">        Arrays.stream(children).forEach(child -&gt; child.accept(visitor));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UnitVisitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visitSoldier</span><span class="params">(Soldier soldier)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visitSergeant</span><span class="params">(Sergeant sergeant)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visitCommander</span><span class="params">(Commander commander)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Commander</span> <span class="keyword">extends</span> <span class="title">Unit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Commander</span><span class="params">(Unit... children)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(children);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(UnitVisitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visitCommander(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">super</span>.accept(visitor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"commander"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommanderVisitor</span> <span class="keyword">implements</span> <span class="title">UnitVisitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitSoldier</span><span class="params">(Soldier soldier)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitSergeant</span><span class="params">(Sergeant sergeant)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitCommander</span><span class="params">(Commander commander)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Good to see you "</span> + commander);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sergeant</span> <span class="keyword">extends</span> <span class="title">Unit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sergeant</span><span class="params">(Unit... children)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(children);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(UnitVisitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visitSergeant(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">super</span>.accept(visitor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"sergeant"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SergeantVisitor</span> <span class="keyword">implements</span> <span class="title">UnitVisitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitSoldier</span><span class="params">(Soldier soldier)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitSergeant</span><span class="params">(Sergeant sergeant)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello "</span> + sergeant);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitCommander</span><span class="params">(Commander commander)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Soldier</span> <span class="keyword">extends</span> <span class="title">Unit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Soldier</span><span class="params">(Unit... children)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(children);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(UnitVisitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visitSoldier(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">super</span>.accept(visitor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"soldier"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SoldierVisitor</span> <span class="keyword">implements</span> <span class="title">UnitVisitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitSoldier</span><span class="params">(Soldier soldier)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Greetings "</span> + soldier);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitSergeant</span><span class="params">(Sergeant sergeant)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitCommander</span><span class="params">(Commander commander)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Commander commander = <span class="keyword">new</span> Commander();</span><br><span class="line">        commander.accept(<span class="keyword">new</span> SoldierVisitor());</span><br><span class="line">        commander.accept(<span class="keyword">new</span> SergeantVisitor());</span><br><span class="line">        commander.accept(<span class="keyword">new</span> CommanderVisitor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="">示例代码</a></p></blockquote><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><img src="/blog/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/visitor_demo.png" class=""><img src="/blog/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/visitor.png" class=""><p>访问者模式主要包含以下角色：</p><p>抽象访问者角色（<code>Visitor</code>）：定义了对每一个元素访问的行为，它的参数就是可以访问的元素，它的方法个数理论上来讲与具体元素类个数一样，从这点不难看出，访问者模式要求元素类的个数不能改变（否则会违背开闭原则）。<br>具体访问者角色（<code>ConcreteVisitor</code>）：具体访问者实现了每个由抽象访问者声明的操作，每一个操作用于访问对象结构中一种类型的元素。<br>抽象元素角色（<code>Element</code>）：定义了一个接受访问者的方法，其意义是指：每一个元素都要可以被访问者访问。<br>具体元素角色（<code>ConcreteElement</code>）：提供接受访问方法的具体实现，而这个具体的实现，通常会调用访问者提供的访问该类元素的方法。<br>对象结构角色（<code>ObjectStructure</code>）：对象结构是一个元素集，它用于存放元素对象，并且提供了遍历其内部元素的方法。它可以设计成一个复合对象或一个简单的集合对象（如一个列表或无序集合）。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;访问者模式&quot;&gt;&lt;a href=&quot;#访问者模式&quot; class=&quot;headerlink&quot; title=&quot;访问者模式&quot;&gt;&lt;/a&gt;访问者模式&lt;/h2&gt;&lt;h3 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot; title=&quot;意图&quot;&gt;&lt;/a&gt;意图&lt;/h3&gt;&lt;p&gt;表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素类的前提下定义作用于这些元素的新操作。&lt;/p&gt;
&lt;h3 id=&quot;适用场景&quot;&gt;&lt;a href=&quot;#适用场景&quot; class=&quot;headerlink&quot; title=&quot;适用场景&quot;&gt;&lt;/a&gt;适用场景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;定义对象结构的类很少变化，但是你经常想在结构上定义新的操作。&lt;/li&gt;
&lt;li&gt;对象结构包含许多具有不同接口的对象类，并且你希望根据这些对象的具体类对这些对象执行操作。&lt;/li&gt;
&lt;li&gt;需要对对象结构中的对象执行许多不同且不相关的操作，并且你想避免使用这些操作“污染”它们的类。&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://xiaojiaC.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="访问者模式" scheme="http://xiaojiaC.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="design patterns" scheme="http://xiaojiaC.github.io/blog/tags/design-patterns/"/>
    
      <category term="gof" scheme="http://xiaojiaC.github.io/blog/tags/gof/"/>
    
      <category term="behavioral" scheme="http://xiaojiaC.github.io/blog/tags/behavioral/"/>
    
      <category term="visitor" scheme="http://xiaojiaC.github.io/blog/tags/visitor/"/>
    
  </entry>
  
  <entry>
    <title>命令模式</title>
    <link href="http://xiaojiac.github.io/blog/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://xiaojiac.github.io/blog/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F.html</id>
    <published>2023-10-19T14:05:06.000Z</published>
    <updated>2023-12-29T07:52:06.624Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><h3 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h3><p>用命令对象的方式存储请求以在将来时可以执行它或撤销它。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互。</li><li>需要支持命令的撤销操作和恢复操作。</li><li>需要在不同的时间指定、排队和执行请求。</li><li>现实语义中具备“命令”的操作，例如：命令菜单、shell 命令等。</li><li>需要支持命令宏（即命令组合操作）。</li><li>……</li></ul><a id="more"></a><h3 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html" target="_blank" rel="noopener">java.lang.Runnable</a> / <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Callable.html" target="_blank" rel="noopener">java.util.concurrent.Callable</a></li><li><a href="https://junit.org/junit4/" target="_blank" rel="noopener">Junit</a> <a href="https://github.com/junit-team/junit4/blob/main/src/main/java/org/junit/runners/model/Statement.java" target="_blank" rel="noopener">Statement</a></li><li><a href="https://docs.spring.io/spring-framework/docs/5.3.29/javadoc-api/org/springframework/jdbc/core/StatementCallback.html" target="_blank" rel="noopener">Spring JdbcTemplate StatementCallback</a></li><li><a href="https://docs.spring.io/spring-framework/docs/5.3.30/reference/html/web.html#mvc-controller" target="_blank" rel="noopener">Spring webmvc</a> / <a href="https://docs.spring.io/spring-framework/docs/5.3.30/reference/html/web.html#webmvc-fn-handler-functions" target="_blank" rel="noopener">HandlerFunction</a></li><li><a href="https://github.com/Netflix/Hystrix/wiki" target="_blank" rel="noopener">Hystrix</a></li></ul><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 有一个遥控器，控制着房间内各种不同电器的开关，例如：电灯、电视机等。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"电灯打开了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"电灯关闭了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightOnCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    LightReceiver light;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LightOnCommand</span><span class="params">(LightReceiver light)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.light = light;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        light.on();  <span class="comment">// 调用接收者的方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        light.off();  <span class="comment">// 调用接收者的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightOffCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    LightReceiver light;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LightOffCommand</span><span class="params">(LightReceiver light)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.light = light;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        light.off();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        light.on();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TVReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"电视机打开了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"电视机关闭了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TVOnCommand</span>  <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    TVReceiver tv;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TVOnCommand</span><span class="params">(TVReceiver tv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        tv.on();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        tv.off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TVOffCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    TVReceiver tv;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TVOffCommand</span><span class="params">(TVReceiver tv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        tv.off();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        tv.on();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteControl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Command[] onCommands;</span><br><span class="line">    Command[] offCommands;</span><br><span class="line">    Command undoCommand; <span class="comment">// 执行撤销的命令</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RemoteControl</span><span class="params">()</span> </span>&#123; <span class="comment">// 完成对按钮初始化</span></span><br><span class="line">        onCommands = <span class="keyword">new</span> Command[<span class="number">5</span>];</span><br><span class="line">        offCommands = <span class="keyword">new</span> Command[<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            onCommands[i] = <span class="keyword">new</span> NoCommand();</span><br><span class="line">            offCommands[i] = <span class="keyword">new</span> NoCommand();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给按钮设置你需要的命令</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(<span class="keyword">int</span> no, Command onCommand, Command offCommand)</span> </span>&#123;</span><br><span class="line">        onCommands[no] = onCommand;</span><br><span class="line">        offCommands[no] = offCommand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onButtonWasPushed</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line">        onCommands[no].execute(); <span class="comment">// 找到你按下的开按钮，并调用对应方法</span></span><br><span class="line">        undoCommand = onCommands[no]; <span class="comment">// 记录这次的操作，用于撤销</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">offButtonWasPushed</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line">        offCommands[no].execute();</span><br><span class="line">        undoCommand = offCommands[no];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undoButtonWasPushed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        undoCommand.undo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LightReceiver lightReceiver = <span class="keyword">new</span> LightReceiver();</span><br><span class="line">        LightOnCommand lightOnCommand = <span class="keyword">new</span> LightOnCommand(lightReceiver);</span><br><span class="line">        LightOffCommand lightOffCommand = <span class="keyword">new</span> LightOffCommand(lightReceiver);</span><br><span class="line"></span><br><span class="line">        TVReceiver tvReceiver = <span class="keyword">new</span> TVReceiver();</span><br><span class="line">        TVOffCommand tvOffCommand = <span class="keyword">new</span> TVOffCommand(tvReceiver);</span><br><span class="line">        TVOnCommand tvOnCommand = <span class="keyword">new</span> TVOnCommand(tvReceiver);</span><br><span class="line"></span><br><span class="line">        RemoteControl remoteControl = <span class="keyword">new</span> RemoteControl();</span><br><span class="line">        remoteControl.setCommand(<span class="number">0</span>, lightOnCommand, lightOffCommand);</span><br><span class="line">        remoteControl.setCommand(<span class="number">1</span>, tvOnCommand, tvOffCommand);</span><br><span class="line"></span><br><span class="line">        remoteControl.onButtonWasPushed(<span class="number">0</span>);</span><br><span class="line">        remoteControl.offButtonWasPushed(<span class="number">0</span>);</span><br><span class="line">        remoteControl.undoButtonWasPushed();</span><br><span class="line"></span><br><span class="line">        remoteControl.onButtonWasPushed(<span class="number">1</span>);</span><br><span class="line">        remoteControl.offButtonWasPushed(<span class="number">1</span>);</span><br><span class="line">        remoteControl.undoButtonWasPushed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="">示例代码</a></p></blockquote><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><img src="/blog/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/command_demo.png" class=""><img src="/blog/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/command.png" class=""><p>命令模式主要包含以下角色：</p><p>抽象命令角色（<code>Command</code>）：定义命令的接口，声明执行的方法。<br>具体命令角色（<code>ConcreteCommand</code>）：是抽象命令角色的具体实现类。通常会持有接收者，并调用接收者的功能来完成命令要执行的操作。<br>接收者角色（<code>Receiver</code>）：真正执行命令的对象。<br>调用者角色（<code>Invoker</code>）：持有命令对象（通常是多个），并通过访问命令对象来执行相关请求，它不直接访问接收者。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;命令模式&quot;&gt;&lt;a href=&quot;#命令模式&quot; class=&quot;headerlink&quot; title=&quot;命令模式&quot;&gt;&lt;/a&gt;命令模式&lt;/h2&gt;&lt;h3 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot; title=&quot;意图&quot;&gt;&lt;/a&gt;意图&lt;/h3&gt;&lt;p&gt;用命令对象的方式存储请求以在将来时可以执行它或撤销它。&lt;/p&gt;
&lt;h3 id=&quot;适用场景&quot;&gt;&lt;a href=&quot;#适用场景&quot; class=&quot;headerlink&quot; title=&quot;适用场景&quot;&gt;&lt;/a&gt;适用场景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互。&lt;/li&gt;
&lt;li&gt;需要支持命令的撤销操作和恢复操作。&lt;/li&gt;
&lt;li&gt;需要在不同的时间指定、排队和执行请求。&lt;/li&gt;
&lt;li&gt;现实语义中具备“命令”的操作，例如：命令菜单、shell 命令等。&lt;/li&gt;
&lt;li&gt;需要支持命令宏（即命令组合操作）。&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://xiaojiaC.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="命令模式" scheme="http://xiaojiaC.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="design patterns" scheme="http://xiaojiaC.github.io/blog/tags/design-patterns/"/>
    
      <category term="gof" scheme="http://xiaojiaC.github.io/blog/tags/gof/"/>
    
      <category term="behavioral" scheme="http://xiaojiaC.github.io/blog/tags/behavioral/"/>
    
      <category term="command" scheme="http://xiaojiaC.github.io/blog/tags/command/"/>
    
  </entry>
  
  <entry>
    <title>责任链模式</title>
    <link href="http://xiaojiac.github.io/blog/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://xiaojiac.github.io/blog/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F.html</id>
    <published>2023-10-18T14:03:06.000Z</published>
    <updated>2023-12-29T07:52:06.632Z</updated>
    
    <content type="html"><![CDATA[<h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><h3 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h3><p>串联接收对象并在链条中传递请求直到一个对象处理它。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>多于一个对象可能要处理请求，并且处理器并不知道优先级，处理器应自动确定。</li><li>想对多个对象之一发出请求而无需明确指定它。</li><li>处理请求的对象集合应该被动态指定时。</li><li>……</li></ul><a id="more"></a><h3 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h3><ul><li><a href="http://docs.oracle.com/javaee/7/api/javax/servlet/Filter.html#doFilter-javax.servlet.ServletRequest-javax.servlet.ServletResponse-javax.servlet.FilterChain-" target="_blank" rel="noopener">javax.servlet.Filter#doFilter()</a></li><li><a href="https://commons.apache.org/proper/commons-chain/index.html" target="_blank" rel="noopener">Apache commons-chain</a></li><li><a href="https://docs.spring.io/spring-framework/docs/5.3.29/javadoc-api/org/springframework/web/servlet/HandlerExecutionChain.html" target="_blank" rel="noopener">Spring HandlerExecutionChain</a></li><li><a href="https://netty.io/4.1/api/io/netty/channel/ChannelPipeline.html" target="_blank" rel="noopener">Netty ChannelPipeline</a></li><li><a href="https://foldright.io/auto-pipeline/index.html" target="_blank" rel="noopener">auto-pipeline</a></li></ul><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 兽王大声命令他的军队。最近响应的是指挥官，然后是军官，然后是士兵。指挥官，军官，士兵这里就形成了一个责任链。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Request</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Type requestType;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String requestDescription;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> handled;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Request</span><span class="params">(<span class="keyword">final</span> Type requestType, <span class="keyword">final</span> String requestDescription)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.requestType = Objects.requireNonNull(requestType);</span><br><span class="line">        <span class="keyword">this</span>.requestDescription = Objects.requireNonNull(requestDescription);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Type <span class="title">getRequestType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> requestType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRequestDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> requestDescription;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">markHandled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.handled = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHandled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.handled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getRequestDescription();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> Type &#123;</span><br><span class="line">        DEFEND_CASTLE, <span class="comment">// 保卫城堡</span></span><br><span class="line">        TORTURE_PRISONER, <span class="comment">// 酷刑囚犯</span></span><br><span class="line">        COLLECT_TAX <span class="comment">// 征收赋税</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RequestHandler next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequestHandler</span><span class="params">(RequestHandler next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Request req)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            next.handleRequest(req);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">printHandling</span><span class="params">(Request req)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span> + <span class="string">" handling request "</span> + req);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrcCommander</span> <span class="keyword">extends</span> <span class="title">RequestHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrcCommander</span><span class="params">(RequestHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Request req)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (req.getRequestType().equals(Request.Type.DEFEND_CASTLE)) &#123;</span><br><span class="line">            printHandling(req);</span><br><span class="line">            req.markHandled();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.handleRequest(req);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Orc 指挥官"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrcOfficer</span> <span class="keyword">extends</span> <span class="title">RequestHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrcOfficer</span><span class="params">(RequestHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Request req)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (req.getRequestType().equals(Request.Type.TORTURE_PRISONER)) &#123;</span><br><span class="line">            printHandling(req);</span><br><span class="line">            req.markHandled();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.handleRequest(req);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Orc 军官"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrcSoldier</span> <span class="keyword">extends</span> <span class="title">RequestHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrcSoldier</span><span class="params">(RequestHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Request req)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (req.getRequestType().equals(Request.Type.COLLECT_TAX)) &#123;</span><br><span class="line">            printHandling(req);</span><br><span class="line">            req.markHandled();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.handleRequest(req);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Orc 士兵"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrcKing</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    RequestHandler chain; <span class="comment">// 责任链</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrcKing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        buildChain();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buildChain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        chain = <span class="keyword">new</span> OrcCommander(<span class="keyword">new</span> OrcOfficer(<span class="keyword">new</span> OrcSoldier(<span class="keyword">null</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeRequest</span><span class="params">(Request req)</span> </span>&#123; <span class="comment">// 下达命令</span></span><br><span class="line">        chain.handleRequest(req);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="">示例代码</a></p></blockquote><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><img src="/blog/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/chainofresponsibility_demo.png" class=""><img src="/blog/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/chainofresponsibility.png" class=""><p>责任链模式主要包含以下角色：</p><p>抽象处理者角色（<code>Handler</code>）：定义出一个处理请求的接口，包含抽象处理方法和一个后继处理者引用。<br>具体处理者角色（<code>ConcreteHandler</code>）：实现抽象处理者的处理方法，会判断是否能够处理本次请求，若可以则处理否则将请求转给其后继者继续执行处理方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;责任链模式&quot;&gt;&lt;a href=&quot;#责任链模式&quot; class=&quot;headerlink&quot; title=&quot;责任链模式&quot;&gt;&lt;/a&gt;责任链模式&lt;/h2&gt;&lt;h3 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot; title=&quot;意图&quot;&gt;&lt;/a&gt;意图&lt;/h3&gt;&lt;p&gt;串联接收对象并在链条中传递请求直到一个对象处理它。&lt;/p&gt;
&lt;h3 id=&quot;适用场景&quot;&gt;&lt;a href=&quot;#适用场景&quot; class=&quot;headerlink&quot; title=&quot;适用场景&quot;&gt;&lt;/a&gt;适用场景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;多于一个对象可能要处理请求，并且处理器并不知道优先级，处理器应自动确定。&lt;/li&gt;
&lt;li&gt;想对多个对象之一发出请求而无需明确指定它。&lt;/li&gt;
&lt;li&gt;处理请求的对象集合应该被动态指定时。&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://xiaojiaC.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="责任链模式" scheme="http://xiaojiaC.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="design patterns" scheme="http://xiaojiaC.github.io/blog/tags/design-patterns/"/>
    
      <category term="gof" scheme="http://xiaojiaC.github.io/blog/tags/gof/"/>
    
      <category term="behavioral" scheme="http://xiaojiaC.github.io/blog/tags/behavioral/"/>
    
      <category term="chain of responsibility" scheme="http://xiaojiaC.github.io/blog/tags/chain-of-responsibility/"/>
    
  </entry>
  
  <entry>
    <title>桥接模式</title>
    <link href="http://xiaojiac.github.io/blog/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://xiaojiac.github.io/blog/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.html</id>
    <published>2023-10-18T13:11:11.000Z</published>
    <updated>2023-12-29T07:52:06.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><h3 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h3><p>将抽象与其实现分离，以便二者可以独立变化。通过组合的方式建立两个类之间的联系, 而不是继承。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>在抽象和具体实现之间需要增加更多的灵活性的场景。</li><li>一个类存在两个或更多的独立变化维度，并且这些维度都需要独立扩展。</li><li>不希望使用继承或因多层继承导致系统类的个数剧增。</li><li>……</li></ul><a id="more"></a><h3 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h3><ul><li><a href="https://docs.oracle.com/javase/8/docs/api/java/sql/Driver.html" target="_blank" rel="noopener">java.sql.Driver</a></li><li><a href="https://square.github.io/okhttp/" target="_blank" rel="noopener">Okhttp3</a> <a href="https://github.com/square/okhttp/blob/okhttp_3.13.x/okhttp/src/main/java/okhttp3/internal/http/BridgeInterceptor.java" target="_blank" rel="noopener">BridgeInterceptor</a></li></ul><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 考虑一下你拥有一种具有不同魔法的武器，并且应该允许将具有不同魔法的不同武器混合使用。 你会怎么做？</span></span><br><span class="line"><span class="comment"> * 为每个魔法创建每种武器的多个副本，还是只是创建单独的魔法并根据需要为武器设置它？</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Enchantment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onActivate</span><span class="params">()</span></span>; <span class="comment">// 激活</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">apply</span><span class="params">()</span></span>; <span class="comment">// 应用</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onDeactivate</span><span class="params">()</span></span>; <span class="comment">// 禁用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyingEnchantment</span> <span class="keyword">implements</span> <span class="title">Enchantment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"物品开始发出微弱的光。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"该物品会飞行并攻击敌人，最终返回所有者的手中。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDeactivate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"物品的光芒消退。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SoulEatingEnchantment</span> <span class="keyword">implements</span> <span class="title">Enchantment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"物品传播嗜血。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"该物品会吞噬敌人的灵魂。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDeactivate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"物品嗜血慢慢消失。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Weapon</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">wield</span><span class="params">()</span></span>; <span class="comment">// 装备</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swing</span><span class="params">()</span></span>; <span class="comment">// 挥舞</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unwield</span><span class="params">()</span></span>; <span class="comment">// 取消装备</span></span><br><span class="line"></span><br><span class="line">    <span class="function">Enchantment <span class="title">getEnchantment</span><span class="params">()</span></span>; <span class="comment">// 桥接魔法层次结构</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sword</span> <span class="keyword">implements</span> <span class="title">Weapon</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Enchantment enchantment;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sword</span><span class="params">(Enchantment enchantment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.enchantment = enchantment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wield</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"装备剑"</span>);</span><br><span class="line">        enchantment.onActivate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"挥舞剑"</span>);</span><br><span class="line">        enchantment.apply();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unwield</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"取消装备剑"</span>);</span><br><span class="line">        enchantment.onDeactivate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Enchantment <span class="title">getEnchantment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> enchantment;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hammer</span> <span class="keyword">implements</span> <span class="title">Weapon</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Enchantment enchantment;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hammer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hammer</span><span class="params">(Enchantment enchantment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.enchantment = enchantment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wield</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"装备锤子"</span>);</span><br><span class="line">        <span class="keyword">if</span> (enchantment != <span class="keyword">null</span>) &#123;</span><br><span class="line">            enchantment.onActivate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"挥舞锤子"</span>);</span><br><span class="line">        <span class="keyword">if</span> (enchantment != <span class="keyword">null</span>) &#123;</span><br><span class="line">            enchantment.apply();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unwield</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"取消装备锤子"</span>);</span><br><span class="line">        <span class="keyword">if</span> (enchantment != <span class="keyword">null</span>) &#123;</span><br><span class="line">            enchantment.onDeactivate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Enchantment <span class="title">getEnchantment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> enchantment;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="">示例代码</a></p></blockquote><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><img src="/blog/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/bridge_demo.png" class=""><img src="/blog/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/bridge.png" class=""><p>桥接模式主要包含以下角色：</p><p>抽象化角色（<code>Abstraction</code>）：定义抽象化角色，并包含一个对实现化角色的引用。<br>扩展抽象化角色（<code>RefinedAbstraction</code>）：抽象化角色的具体实现，实现父类中的业务方法，并通过组合关系调用实现化角色中的业务方法。<br>实现化角色（<code>Implementor</code>）：定义实现维度的基本操作，提供给抽象化角色使用。<br>具体实现化角色（<code>ConcreteImplementor</code>）：实现化角色的具体实现。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;桥接模式&quot;&gt;&lt;a href=&quot;#桥接模式&quot; class=&quot;headerlink&quot; title=&quot;桥接模式&quot;&gt;&lt;/a&gt;桥接模式&lt;/h2&gt;&lt;h3 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot; title=&quot;意图&quot;&gt;&lt;/a&gt;意图&lt;/h3&gt;&lt;p&gt;将抽象与其实现分离，以便二者可以独立变化。通过组合的方式建立两个类之间的联系, 而不是继承。&lt;/p&gt;
&lt;h3 id=&quot;适用场景&quot;&gt;&lt;a href=&quot;#适用场景&quot; class=&quot;headerlink&quot; title=&quot;适用场景&quot;&gt;&lt;/a&gt;适用场景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在抽象和具体实现之间需要增加更多的灵活性的场景。&lt;/li&gt;
&lt;li&gt;一个类存在两个或更多的独立变化维度，并且这些维度都需要独立扩展。&lt;/li&gt;
&lt;li&gt;不希望使用继承或因多层继承导致系统类的个数剧增。&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://xiaojiaC.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="桥接模式" scheme="http://xiaojiaC.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="design patterns" scheme="http://xiaojiaC.github.io/blog/tags/design-patterns/"/>
    
      <category term="gof" scheme="http://xiaojiaC.github.io/blog/tags/gof/"/>
    
      <category term="structural" scheme="http://xiaojiaC.github.io/blog/tags/structural/"/>
    
      <category term="bridge" scheme="http://xiaojiaC.github.io/blog/tags/bridge/"/>
    
  </entry>
  
  <entry>
    <title>外观模式</title>
    <link href="http://xiaojiac.github.io/blog/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://xiaojiac.github.io/blog/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F.html</id>
    <published>2023-10-18T12:46:06.000Z</published>
    <updated>2023-12-29T07:52:06.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><h3 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h3><p>为一个子系统中的一系列接口提供一个简单统一的接口。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>需要为一个复杂的子系统提供一个简单的接口，以便子系统更容易使用。</li><li>客户端与抽象的实现类之间存在许多依赖关系。 引入外观以使子系统与客户端分离，从而提高子系统的独立性和可移植性。</li><li>需要对子系统进行分层。 使用外观来定义每个子系统级别的入口点。</li><li>……</li></ul><a id="more"></a><h3 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h3><ul><li><a href="https://tomcat.apache.org/tomcat-10.1-doc/index.html" target="_blank" rel="noopener">Apache Tomcat</a> <a href="https://tomcat.apache.org/tomcat-10.1-doc/api/org/apache/catalina/connector/RequestFacade.html" target="_blank" rel="noopener">RequestFacade</a> / <a href="https://tomcat.apache.org/tomcat-10.1-doc/api/org/apache/catalina/connector/ResponseFacade.html" target="_blank" rel="noopener">ResponseFacade</a></li></ul><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个金矿是怎么工作的？你说：“嗯，矿工下去然后挖金子！”。这是你所认为的因为你在使用金矿对外提供的一个简单接口，</span></span><br><span class="line"><span class="comment"> * 在内部它却要做很多事情。这个简单的接口对复杂的子系统来说就是一个外观。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DwarvenMineWorker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goToSleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name() + <span class="string">"goes to sleep."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wakeUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name() + <span class="string">"wakes up."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goHome</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name() + <span class="string">"goes home."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goToMine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name() + <span class="string">"goes to the mine."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">(Action action)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">            <span class="keyword">case</span> GO_TO_SLEEP:</span><br><span class="line">                goToSleep();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> WAKE_UP:</span><br><span class="line">                wakeUp();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> GO_HOME:</span><br><span class="line">                goHome();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> GO_TO_MINE:</span><br><span class="line">                goToMine();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> WORK:</span><br><span class="line">                work();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">"Undefined action"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">(Action... actions)</span> </span>&#123;</span><br><span class="line">        Arrays.stream(actions).forEach(<span class="keyword">this</span>::action);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> Action &#123;</span><br><span class="line">        GO_TO_SLEEP, WAKE_UP, GO_HOME, GO_TO_MINE, WORK</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DwarvenTunnelDigger</span> <span class="keyword">extends</span> <span class="title">DwarvenMineWorker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name() + <span class="string">" creates another promising tunnel."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Dwarven tunnel digger"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DwarvenGoldDigger</span> <span class="keyword">extends</span> <span class="title">DwarvenMineWorker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name() + <span class="string">" digs for gold."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Dwarf gold digger"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DwarvenCartOperator</span> <span class="keyword">extends</span> <span class="title">DwarvenMineWorker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name() + <span class="string">" moves gold chunks out of the mine."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Dwarf cart operator"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DwarvenGoldmineFacade</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;DwarvenMineWorker&gt; workers;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DwarvenGoldmineFacade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        workers = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> DwarvenGoldDigger(),</span><br><span class="line">                <span class="keyword">new</span> DwarvenCartOperator(),</span><br><span class="line">                <span class="keyword">new</span> DwarvenTunnelDigger());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #region 简单接口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startNewDay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        makeActions(workers, DwarvenMineWorker.Action.WAKE_UP, DwarvenMineWorker.Action.GO_TO_MINE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">digOutGold</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        makeActions(workers, DwarvenMineWorker.Action.WORK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endDay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        makeActions(workers, DwarvenMineWorker.Action.GO_HOME, DwarvenMineWorker.Action.GO_TO_SLEEP);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// #endregion</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">makeActions</span><span class="params">(Collection&lt;DwarvenMineWorker&gt; workers,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    DwarvenMineWorker.Action... actions)</span> </span>&#123;</span><br><span class="line">        workers.forEach(worker -&gt; worker.action(actions));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="">示例代码</a></p></blockquote><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><img src="/blog/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/facade_demo.png" class="">]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;外观模式&quot;&gt;&lt;a href=&quot;#外观模式&quot; class=&quot;headerlink&quot; title=&quot;外观模式&quot;&gt;&lt;/a&gt;外观模式&lt;/h2&gt;&lt;h3 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot; title=&quot;意图&quot;&gt;&lt;/a&gt;意图&lt;/h3&gt;&lt;p&gt;为一个子系统中的一系列接口提供一个简单统一的接口。&lt;/p&gt;
&lt;h3 id=&quot;适用场景&quot;&gt;&lt;a href=&quot;#适用场景&quot; class=&quot;headerlink&quot; title=&quot;适用场景&quot;&gt;&lt;/a&gt;适用场景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;需要为一个复杂的子系统提供一个简单的接口，以便子系统更容易使用。&lt;/li&gt;
&lt;li&gt;客户端与抽象的实现类之间存在许多依赖关系。 引入外观以使子系统与客户端分离，从而提高子系统的独立性和可移植性。&lt;/li&gt;
&lt;li&gt;需要对子系统进行分层。 使用外观来定义每个子系统级别的入口点。&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://xiaojiaC.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="外观模式" scheme="http://xiaojiaC.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="design patterns" scheme="http://xiaojiaC.github.io/blog/tags/design-patterns/"/>
    
      <category term="gof" scheme="http://xiaojiaC.github.io/blog/tags/gof/"/>
    
      <category term="structural" scheme="http://xiaojiaC.github.io/blog/tags/structural/"/>
    
      <category term="facade" scheme="http://xiaojiaC.github.io/blog/tags/facade/"/>
    
  </entry>
  
  <entry>
    <title>模板方法模式</title>
    <link href="http://xiaojiac.github.io/blog/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://xiaojiac.github.io/blog/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.html</id>
    <published>2023-10-18T12:46:06.000Z</published>
    <updated>2023-12-29T07:52:06.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><h3 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h3><p>在一个操作中定义算法的骨架，将某些步骤推迟到子类实现。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>一次性实现一个算法中不变的部分并将其留给子类来实现可能变化的行为。</li><li>子类之间的共同行为应分解并集中在一个共同类中，以避免代码重复。</li><li>需要控制子类扩展。定义一个模板方法，在特定点调用“钩子”操作，从而仅允许在这些点进行扩展。</li><li>……</li></ul><a id="more"></a><h3 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h3><ul><li><a href="https://jakarta.ee/specifications/servlet/4.0/apidocs/javax/servlet/genericservlet#init--" target="_blank" rel="noopener">javax.servlet.GenericServlet#init()</a></li><li><a href="https://docs.spring.io/spring-framework/docs/5.3.29/javadoc-api/org/springframework/context/support/AbstractApplicationContext.html#refresh--" target="_blank" rel="noopener">Spring AbstractApplicationContext#refresh()</a></li></ul><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 偷东西的一般步骤是相同的。首先，选择目标，然后以某种方式使其迷惑，最后你偷走了该物品。</span></span><br><span class="line"><span class="comment"> * 然而这些步骤有很多实现方式。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">StealingMethod</span> </span>&#123; <span class="comment">// 偷窃方法论</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> String <span class="title">pickTarget</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">confuseTarget</span><span class="params">(String target)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">stealTheItem</span><span class="params">(String target)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">steal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String target = pickTarget();</span><br><span class="line">        System.out.println(<span class="string">"目标选定："</span>+ target);</span><br><span class="line">        confuseTarget(target);</span><br><span class="line">        stealTheItem(target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubtleMethod</span> <span class="keyword">extends</span> <span class="title">StealingMethod</span> </span>&#123; <span class="comment">// 顺手牵羊</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">pickTarget</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"店主"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">confuseTarget</span><span class="params">(String target)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"流着泪走近并拥抱："</span> + target);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">stealTheItem</span><span class="params">(String target)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在近距离接触时顺走钱包："</span> + target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HitAndRunMethod</span> <span class="keyword">extends</span> <span class="title">StealingMethod</span> </span>&#123; <span class="comment">// 趁其不备</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">pickTarget</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"财主"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">confuseTarget</span><span class="params">(String target)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"从后面接近："</span> + target);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">stealTheItem</span><span class="params">(String target)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"抓住手袋飞奔而去："</span> + target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thief</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StealingMethod method;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Thief</span><span class="params">(StealingMethod method)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">steal</span><span class="params">()</span> </span>&#123; <span class="comment">// 实施窃取</span></span><br><span class="line">        method.steal();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeMethod</span><span class="params">(StealingMethod method)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="">示例代码</a></p></blockquote><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><img src="/blog/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/templatemethod_demo.png" class=""><img src="/blog/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/templatemethod.png" class=""><p>模板方法模式主要包含以下角色：</p><p>抽象类角色（<code>AbstractClass</code>）：类中实现了模板方法，定义了算法的骨架，以及需要具体子类去实现的其它抽象方法。<br>具体类角色（<code>ConcreteClass</code>）：实现抽象方法，以完成算法中特定的扩展点逻辑。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;模板方法模式&quot;&gt;&lt;a href=&quot;#模板方法模式&quot; class=&quot;headerlink&quot; title=&quot;模板方法模式&quot;&gt;&lt;/a&gt;模板方法模式&lt;/h2&gt;&lt;h3 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot; title=&quot;意图&quot;&gt;&lt;/a&gt;意图&lt;/h3&gt;&lt;p&gt;在一个操作中定义算法的骨架，将某些步骤推迟到子类实现。&lt;/p&gt;
&lt;h3 id=&quot;适用场景&quot;&gt;&lt;a href=&quot;#适用场景&quot; class=&quot;headerlink&quot; title=&quot;适用场景&quot;&gt;&lt;/a&gt;适用场景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一次性实现一个算法中不变的部分并将其留给子类来实现可能变化的行为。&lt;/li&gt;
&lt;li&gt;子类之间的共同行为应分解并集中在一个共同类中，以避免代码重复。&lt;/li&gt;
&lt;li&gt;需要控制子类扩展。定义一个模板方法，在特定点调用“钩子”操作，从而仅允许在这些点进行扩展。&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://xiaojiaC.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="模板方法模式" scheme="http://xiaojiaC.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="design patterns" scheme="http://xiaojiaC.github.io/blog/tags/design-patterns/"/>
    
      <category term="gof" scheme="http://xiaojiaC.github.io/blog/tags/gof/"/>
    
      <category term="behavioral" scheme="http://xiaojiaC.github.io/blog/tags/behavioral/"/>
    
      <category term="template method" scheme="http://xiaojiaC.github.io/blog/tags/template-method/"/>
    
  </entry>
  
  <entry>
    <title>组合模式</title>
    <link href="http://xiaojiac.github.io/blog/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://xiaojiac.github.io/blog/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F.html</id>
    <published>2023-10-17T13:35:06.000Z</published>
    <updated>2023-12-29T07:52:06.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><h3 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h3><p>将对象组合成树结构以表示部分整体层次结构。 组合可以使客户统一对待单个对象和组合对象。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>需要表示一个对象整体与部分的层次结构时，可以使用组合模式来实现树形结构。例如：文件系统中的文件与文件夹。</li><li>需要忽略组合对象和单个对象之间的差异，客户将统一对待组合结构中的所有对象。例如：菜单系统中的菜单项与子菜单。</li><li>需要将对象的创建和使用分离时，可以使用组合模式来实现依赖注入。例如：<code>Spring</code>框架中的 Bean 对象。</li><li>……</li></ul><a id="more"></a><h3 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/awt/Container.html" target="_blank" rel="noopener">java.awt.Container</a> / <a href="http://docs.oracle.com/javase/8/docs/api/java/awt/Component.html" target="_blank" rel="noopener">java.awt.Component</a></li></ul><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 每个句子由单词组成，单词又由字符组成。这些对象中的每一个都是可打印的，它们可以在它们之前或之后打印一些内容，</span></span><br><span class="line"><span class="comment"> * 例如句子始终以句号结尾，单词始终在其前面有空格。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LetterComposite</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;LetterComposite&gt; children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(LetterComposite letter)</span> </span>&#123;</span><br><span class="line">        children.add(letter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> children.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">printThisBefore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">printThisAfter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        printThisBefore();</span><br><span class="line">        children.forEach(LetterComposite::print);</span><br><span class="line">        printThisAfter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Letter</span> <span class="keyword">extends</span> <span class="title">LetterComposite</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> character;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Letter</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.character = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">printThisBefore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(character);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Word</span> <span class="keyword">extends</span> <span class="title">LetterComposite</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Word</span><span class="params">(List&lt;Letter&gt; letters)</span> </span>&#123;</span><br><span class="line">        letters.forEach(<span class="keyword">this</span>::add);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Word</span><span class="params">(<span class="keyword">char</span>... letters)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> letter : letters) &#123;</span><br><span class="line">            <span class="keyword">this</span>.add(<span class="keyword">new</span> Letter(letter));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">printThisBefore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sentence</span> <span class="keyword">extends</span> <span class="title">LetterComposite</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sentence</span><span class="params">(List&lt;Word&gt; words)</span> </span>&#123;</span><br><span class="line">        words.forEach(<span class="keyword">this</span>::add);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">printThisAfter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">".\r\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Messenger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">LetterComposite <span class="title">messageFromOrcs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Word&gt; words = List.of(</span><br><span class="line">                <span class="keyword">new</span> Word(<span class="string">'W'</span>, <span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'r'</span>, <span class="string">'e'</span>),</span><br><span class="line">                <span class="keyword">new</span> Word(<span class="string">'t'</span>, <span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'r'</span>, <span class="string">'e'</span>),</span><br><span class="line">                <span class="keyword">new</span> Word(<span class="string">'i'</span>, <span class="string">'s'</span>),</span><br><span class="line">                <span class="keyword">new</span> Word(<span class="string">'a'</span>),</span><br><span class="line">                <span class="keyword">new</span> Word(<span class="string">'w'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'p'</span>),</span><br><span class="line">                <span class="keyword">new</span> Word(<span class="string">'t'</span>, <span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'r'</span>, <span class="string">'e'</span>),</span><br><span class="line">                <span class="keyword">new</span> Word(<span class="string">'i'</span>, <span class="string">'s'</span>),</span><br><span class="line">                <span class="keyword">new</span> Word(<span class="string">'a'</span>),</span><br><span class="line">                <span class="keyword">new</span> Word(<span class="string">'w'</span>, <span class="string">'a'</span>, <span class="string">'y'</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Sentence(words);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">LetterComposite <span class="title">messageFromElves</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Word&gt; words = List.of(</span><br><span class="line">                <span class="keyword">new</span> Word(<span class="string">'M'</span>, <span class="string">'u'</span>, <span class="string">'c'</span>, <span class="string">'h'</span>),</span><br><span class="line">                <span class="keyword">new</span> Word(<span class="string">'w'</span>, <span class="string">'i'</span>, <span class="string">'n'</span>, <span class="string">'d'</span>),</span><br><span class="line">                <span class="keyword">new</span> Word(<span class="string">'p'</span>, <span class="string">'o'</span>, <span class="string">'u'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>),</span><br><span class="line">                <span class="keyword">new</span> Word(<span class="string">'f'</span>, <span class="string">'r'</span>, <span class="string">'o'</span>, <span class="string">'m'</span>),</span><br><span class="line">                <span class="keyword">new</span> Word(<span class="string">'y'</span>, <span class="string">'o'</span>, <span class="string">'u'</span>, <span class="string">'r'</span>),</span><br><span class="line">                <span class="keyword">new</span> Word(<span class="string">'m'</span>, <span class="string">'o'</span>, <span class="string">'u'</span>, <span class="string">'t'</span>, <span class="string">'h'</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Sentence(words);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="">示例代码</a></p></blockquote><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><img src="/blog/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/composite_demo.png" class=""><img src="/blog/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/composite.png" class=""><p>类图中主要包含以下角色：</p><p>抽象构件角色（<code>Component</code>）：它可以是接口或抽象类，为叶子构件和容器构件对象声明接口，在该角色中可以包含所有子类共有行为的声明和实现。在抽象构件中定义了访问及管理它的子构件的方法，如增加子构件、删除子构件、获取子构件等。<br>叶子构件角色（<code>Leaf</code>）：它在组合结构中表示叶子节点对象，叶子节点没有子节点，它实现了在抽象构件中定义的行为。对于那些访问及管理子构件的方法，可以通过抛出异常等方式进行处理。<br>容器构件角色（<code>Composite</code>）：它在组合结构中表示容器节点对象，容器节点包含子节点，其子节点可以是叶子节点，也可以是容器节点，它提供一个集合用于存储子节点，实现了在抽象构件中定义的行为，包括那些访问及管理子构件的方法，在其业务方法中可以递归调用其子节点的业务方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;组合模式&quot;&gt;&lt;a href=&quot;#组合模式&quot; class=&quot;headerlink&quot; title=&quot;组合模式&quot;&gt;&lt;/a&gt;组合模式&lt;/h2&gt;&lt;h3 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot; title=&quot;意图&quot;&gt;&lt;/a&gt;意图&lt;/h3&gt;&lt;p&gt;将对象组合成树结构以表示部分整体层次结构。 组合可以使客户统一对待单个对象和组合对象。&lt;/p&gt;
&lt;h3 id=&quot;适用场景&quot;&gt;&lt;a href=&quot;#适用场景&quot; class=&quot;headerlink&quot; title=&quot;适用场景&quot;&gt;&lt;/a&gt;适用场景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;需要表示一个对象整体与部分的层次结构时，可以使用组合模式来实现树形结构。例如：文件系统中的文件与文件夹。&lt;/li&gt;
&lt;li&gt;需要忽略组合对象和单个对象之间的差异，客户将统一对待组合结构中的所有对象。例如：菜单系统中的菜单项与子菜单。&lt;/li&gt;
&lt;li&gt;需要将对象的创建和使用分离时，可以使用组合模式来实现依赖注入。例如：&lt;code&gt;Spring&lt;/code&gt;框架中的 Bean 对象。&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://xiaojiaC.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="组合模式" scheme="http://xiaojiaC.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="design patterns" scheme="http://xiaojiaC.github.io/blog/tags/design-patterns/"/>
    
      <category term="gof" scheme="http://xiaojiaC.github.io/blog/tags/gof/"/>
    
      <category term="structural" scheme="http://xiaojiaC.github.io/blog/tags/structural/"/>
    
      <category term="composite" scheme="http://xiaojiaC.github.io/blog/tags/composite/"/>
    
  </entry>
  
  <entry>
    <title>原型模式</title>
    <link href="http://xiaojiac.github.io/blog/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://xiaojiac.github.io/blog/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.html</id>
    <published>2023-10-17T12:55:06.000Z</published>
    <updated>2023-12-29T07:52:06.624Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><h3 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h3><p>通过复制现有的实例来创建新的实例，无需知道相应类的信息。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>某些结构复杂的对象的创建工作，由于需求的变化，这些对象经常面临着剧烈的变化，但是他们却拥有比较稳定一致的接口。</li><li>……</li></ul><a id="more"></a><h3 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h3><ul><li><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--" target="_blank" rel="noopener">java.lang.Object#clone()</a></li><li><a href="https://commons.apache.org/proper/commons-beanutils/javadocs/v1.9.4/apidocs/org/apache/commons/beanutils/BeanUtils.html#cloneBean-java.lang.Object-" target="_blank" rel="noopener">Apache commons-beanutils BeanUtils#cloneBean(Object)</a></li><li><a href="https://docs.spring.io/spring-framework/docs/5.3.29/javadoc-api/org/springframework/beans/factory/config/ConfigurableBeanFactory.html#SCOPE_PROTOTYPE" target="_blank" rel="noopener">Spring ConfigurableBeanFactory#SCOPE_PROTOTYPE</a></li><li>细胞分裂</li><li>物种克隆</li></ul><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 百宝箱包含一组魔法物品。有多种物品，例如戒指，药水和武器。可以使用藏宝箱提供的迭代器按类型浏览物品。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShippingAddress</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String receiver;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ShippingAddress <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="comment">// 浅拷贝</span></span><br><span class="line">        <span class="comment">// return (ShippingAddress) super.clone();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 深拷贝</span></span><br><span class="line">        ShippingAddress res = (ShippingAddress) <span class="keyword">super</span>.clone();</span><br><span class="line">        res.address = res.address.clone(); <span class="comment">// 非基本数据类型属性也需拷贝</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String country;</span><br><span class="line">        <span class="keyword">private</span> String province;</span><br><span class="line">        <span class="keyword">private</span> String city;</span><br><span class="line">        <span class="keyword">private</span> String detail;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Address <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (Address) <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="">示例代码</a></p></blockquote><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><p>创建一个新对象，新对象的属性和原来对象完全相同，对于非基本数据类型属性，仍指向原有属性所指向对象的内存地址。</p><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><p>创建一个新对象，属性中引用的其他对象也会被克隆，不再指向原有对象地址。</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><img src="/blog/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/prototype.png" class=""><p>类图中主要包含以下角色：</p><p>抽象原型角色（<code>Prototype</code>）：声明克隆方法的接口，来说明它有被克隆功能。<br>具体原型角色（<code>ConcretePrototype</code>）：实现在抽象原型中声明的克隆方法，在克隆方法中返回自己的一个克隆对象。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;原型模式&quot;&gt;&lt;a href=&quot;#原型模式&quot; class=&quot;headerlink&quot; title=&quot;原型模式&quot;&gt;&lt;/a&gt;原型模式&lt;/h2&gt;&lt;h3 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot; title=&quot;意图&quot;&gt;&lt;/a&gt;意图&lt;/h3&gt;&lt;p&gt;通过复制现有的实例来创建新的实例，无需知道相应类的信息。&lt;/p&gt;
&lt;h3 id=&quot;适用场景&quot;&gt;&lt;a href=&quot;#适用场景&quot; class=&quot;headerlink&quot; title=&quot;适用场景&quot;&gt;&lt;/a&gt;适用场景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;某些结构复杂的对象的创建工作，由于需求的变化，这些对象经常面临着剧烈的变化，但是他们却拥有比较稳定一致的接口。&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://xiaojiaC.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="原型模式" scheme="http://xiaojiaC.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="design patterns" scheme="http://xiaojiaC.github.io/blog/tags/design-patterns/"/>
    
      <category term="gof" scheme="http://xiaojiaC.github.io/blog/tags/gof/"/>
    
      <category term="creational" scheme="http://xiaojiaC.github.io/blog/tags/creational/"/>
    
      <category term="prototype" scheme="http://xiaojiaC.github.io/blog/tags/prototype/"/>
    
  </entry>
  
  <entry>
    <title>观察者模式</title>
    <link href="http://xiaojiac.github.io/blog/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://xiaojiac.github.io/blog/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.html</id>
    <published>2023-10-16T13:13:06.000Z</published>
    <updated>2023-12-29T07:52:06.632Z</updated>
    
    <content type="html"><![CDATA[<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><h3 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h3><p>当一个对象改变状态时，所有依赖它的对象都将自动通知或更新。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>当一个对象的改变的同时需要改变其他对象，同时你又不知道有多少对象需要改变时。</li><li>当一个对象可以通知其他对象而无需假设这些对象是谁时。</li><li>……</li></ul><a id="more"></a><h3 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Observer.html" target="_blank" rel="noopener">java.util.Observer</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/EventListener.html" target="_blank" rel="noopener">java.util.EventListener</a></li><li><a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="noopener">RxJava</a></li><li><a href="https://docs.spring.io/spring-framework/docs/5.3.29/javadoc-api/org/springframework/context/ApplicationListener.html" target="_blank" rel="noopener">Spring ApplicationListener</a></li><li>服务注册中心</li><li>图形界面应用程序</li><li>RSS/消息订阅/邮件系统</li></ul><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在遥远的土地上生活着霍比特人和兽人的种族。他们都是户外生活的人所以他们密切关注天气的变化。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WeatherObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(WeatherType currentWeather)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> WeatherType &#123;</span><br><span class="line"></span><br><span class="line">    SUNNY(<span class="string">"晴"</span>), RAINY(<span class="string">"雨"</span>), WINDY(<span class="string">"云"</span>), COLD(<span class="string">"风"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    WeatherType(String description) &#123;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hobbits</span> <span class="keyword">implements</span> <span class="title">WeatherObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(WeatherType currentWeather)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"霍比特人现在面临天气："</span> + currentWeather.getDescription());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orcs</span> <span class="keyword">implements</span> <span class="title">WeatherObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(WeatherType currentWeather)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"兽人现在面临天气："</span> + currentWeather.getDescription());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> WeatherType currentWeather;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;WeatherObserver&gt; observers;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Weather</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        currentWeather = WeatherType.SUNNY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(WeatherObserver obs)</span> </span>&#123;</span><br><span class="line">        observers.add(obs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(WeatherObserver obs)</span> </span>&#123;</span><br><span class="line">        observers.remove(obs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟天气随着时间流逝而变化。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timePasses</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WeatherType[] enumValues = WeatherType.values();</span><br><span class="line">        currentWeather = enumValues[(currentWeather.ordinal() + <span class="number">1</span>) % enumValues.length];</span><br><span class="line">        System.out.println(<span class="string">"变天了: "</span> + currentWeather);</span><br><span class="line">        notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (WeatherObserver obs : observers) &#123;</span><br><span class="line">            obs.update(currentWeather);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="">示例代码</a></p></blockquote><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><img src="/blog/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/observer_demo.png" class=""><img src="/blog/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/observer.png" class=""><p>类图中主要包含以下角色：</p><p>抽象主题角色（<code>Subject</code>）：提供一个用于保存观察者对象的容器，可以增加、删除观察者以及通知所有观察者的方法。<br>具体主题角色（<code>ConcreteSubject</code>）：负责定义它自己的业务逻辑，并在主题内部状态改变时，通知它的所有观察者对象。<br>抽象观察者角色（<code>Observer</code>）：它是一个抽象类或接口，包含一个响应方法用来在订阅主题发生更改时做出对应反应。<br>具体观察者角色（<code>ConcreteObserver</code>）：实现抽象观察者中定义的抽象响应方法，以便在订阅主题发生更改时及时做出自己对应的反应。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;观察者模式&quot;&gt;&lt;a href=&quot;#观察者模式&quot; class=&quot;headerlink&quot; title=&quot;观察者模式&quot;&gt;&lt;/a&gt;观察者模式&lt;/h2&gt;&lt;h3 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot; title=&quot;意图&quot;&gt;&lt;/a&gt;意图&lt;/h3&gt;&lt;p&gt;当一个对象改变状态时，所有依赖它的对象都将自动通知或更新。&lt;/p&gt;
&lt;h3 id=&quot;适用场景&quot;&gt;&lt;a href=&quot;#适用场景&quot; class=&quot;headerlink&quot; title=&quot;适用场景&quot;&gt;&lt;/a&gt;适用场景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;当一个对象的改变的同时需要改变其他对象，同时你又不知道有多少对象需要改变时。&lt;/li&gt;
&lt;li&gt;当一个对象可以通知其他对象而无需假设这些对象是谁时。&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://xiaojiaC.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="观察者模式" scheme="http://xiaojiaC.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="design patterns" scheme="http://xiaojiaC.github.io/blog/tags/design-patterns/"/>
    
      <category term="gof" scheme="http://xiaojiaC.github.io/blog/tags/gof/"/>
    
      <category term="behavioral" scheme="http://xiaojiaC.github.io/blog/tags/behavioral/"/>
    
      <category term="observer" scheme="http://xiaojiaC.github.io/blog/tags/observer/"/>
    
  </entry>
  
  <entry>
    <title>装饰器模式</title>
    <link href="http://xiaojiac.github.io/blog/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://xiaojiac.github.io/blog/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F.html</id>
    <published>2023-10-16T12:43:06.000Z</published>
    <updated>2023-12-29T07:52:06.632Z</updated>
    
    <content type="html"><![CDATA[<h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><h3 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h3><p>在不改变原有对象的基础上，动态地给一个对象添加一些额外的职责。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>用于扩展一个类的功能，或者给一个类添加附加职责。</li><li>动态地给一个对象添加功能，这些功能可以再被动态地撤销。</li><li>需要为一批平行的类进行改装或加装功能。</li><li>……</li></ul><a id="more"></a><h3 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/io/InputStream.html" target="_blank" rel="noopener">java.io.InputStream</a> / <a href="http://docs.oracle.com/javase/8/docs/api/java/io/OutputStream.html" target="_blank" rel="noopener">java.io.OutputStream</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/io/Reader.html" target="_blank" rel="noopener">java.io.Reader</a> / <a href="http://docs.oracle.com/javase/8/docs/api/java/io/Writer.html" target="_blank" rel="noopener">java.io.Writer</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#synchronizedCollection-java.util.Collection-" target="_blank" rel="noopener">Collections#synchronizedXXX()</a> / <a href="http://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#unmodifiableCollection-java.util.Collection-" target="_blank" rel="noopener">Collections#unmodifiableXXX()</a> / <a href="http://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#checkedCollection-java.util.Collection-java.lang.Class-" target="_blank" rel="noopener">Collections#checkedXXX()</a></li><li><a href="https://commons.apache.org/proper/commons-collections/javadocs/api-4.4/org/apache/commons/collections4/collection/AbstractCollectionDecorator.html" target="_blank" rel="noopener">commons-collections AbstractCollectionDecorator</a> / <a href="https://commons.apache.org/proper/commons-collections/javadocs/api-4.4/org/apache/commons/collections4/map/AbstractMapDecorator.html" target="_blank" rel="noopener">AbstractMapDecorator</a></li><li><a href="https://docs.spring.io/spring-framework/docs/5.3.29/javadoc-api/org/springframework/cache/transaction/TransactionAwareCacheDecorator.html" target="_blank" rel="noopener">Spring TransactionAwareCacheDecorator</a></li><li><a href="https://mybatis.org/mybatis-3/zh/apidocs/org/apache/ibatis/cache/decorators/package-summary.html" target="_blank" rel="noopener">Mybatis cache decorators</a></li></ul><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 附近的山丘上住着一个愤怒的巨魔。通常它是徒手战斗，但有时它有武器。</span></span><br><span class="line"><span class="comment"> * 为了武装它不必创建新的巨魔，只需选择合适的武器动态装饰它。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Troll</span> </span>&#123; <span class="comment">// 巨魔</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>; <span class="comment">// 攻击</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getAttackPower</span><span class="params">()</span></span>; <span class="comment">// 获得攻击力</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fleeBattle</span><span class="params">()</span></span>; <span class="comment">// 逃离战斗</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleTroll</span> <span class="keyword">implements</span> <span class="title">Troll</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"巨魔试图抓住你！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAttackPower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fleeBattle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"巨魔惊恐地尖叫着逃跑了！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClubbedTroll</span> <span class="keyword">implements</span> <span class="title">Troll</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Troll decorated;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClubbedTroll</span><span class="params">(Troll decorated)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.decorated = decorated;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        decorated.attack();</span><br><span class="line">        System.out.println(<span class="string">"巨魔向你挥舞棍子！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAttackPower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> decorated.getAttackPower() + <span class="number">10</span>; <span class="comment">// 伤害增加</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fleeBattle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        decorated.fleeBattle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="">示例代码</a></p></blockquote><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><img src="/blog/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/decorator_demo.png" class=""><img src="/blog/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/decorator.png" class=""><p>装饰器模式主要包含以下角色：</p><p>抽象构件角色（<code>Component</code>）：定义一个抽象接口以规范准备接收附加职责的对象。<br>具体构件角色（<code>ConcreteComponent</code>）：实现抽象构件，将要通过装饰角色为其添加一些职责。<br>抽象装饰角色（<code>Decorator</code>）：继承抽象构件，并包含具体构件的实例，可以通过其子类扩展具体构件的功能。<br>具体装饰角色（<code>ConcreteDecorator</code>）：实现抽象装饰的相关方法，并给具体构件对象添加附加的职责。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;装饰器模式&quot;&gt;&lt;a href=&quot;#装饰器模式&quot; class=&quot;headerlink&quot; title=&quot;装饰器模式&quot;&gt;&lt;/a&gt;装饰器模式&lt;/h2&gt;&lt;h3 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot; title=&quot;意图&quot;&gt;&lt;/a&gt;意图&lt;/h3&gt;&lt;p&gt;在不改变原有对象的基础上，动态地给一个对象添加一些额外的职责。&lt;/p&gt;
&lt;h3 id=&quot;适用场景&quot;&gt;&lt;a href=&quot;#适用场景&quot; class=&quot;headerlink&quot; title=&quot;适用场景&quot;&gt;&lt;/a&gt;适用场景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;用于扩展一个类的功能，或者给一个类添加附加职责。&lt;/li&gt;
&lt;li&gt;动态地给一个对象添加功能，这些功能可以再被动态地撤销。&lt;/li&gt;
&lt;li&gt;需要为一批平行的类进行改装或加装功能。&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://xiaojiaC.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="装饰器模式" scheme="http://xiaojiaC.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="design patterns" scheme="http://xiaojiaC.github.io/blog/tags/design-patterns/"/>
    
      <category term="gof" scheme="http://xiaojiaC.github.io/blog/tags/gof/"/>
    
      <category term="structural" scheme="http://xiaojiaC.github.io/blog/tags/structural/"/>
    
      <category term="decorator" scheme="http://xiaojiaC.github.io/blog/tags/decorator/"/>
    
  </entry>
  
  <entry>
    <title>迭代器模式</title>
    <link href="http://xiaojiac.github.io/blog/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://xiaojiac.github.io/blog/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.html</id>
    <published>2023-10-16T12:33:06.000Z</published>
    <updated>2023-12-29T07:52:06.636Z</updated>
    
    <content type="html"><![CDATA[<h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><h3 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h3><p>提供一种方法顺序访问一个聚合对象中的各种元素，而又不暴露该对象的内部表示。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>访问一个聚合对象的内容而无需暴露它的内部表示。</li><li>支持对聚合对象的多种遍历。</li><li>为遍历不同的聚合结构提供一个统一的接口。</li><li>……</li></ul><a id="more"></a><h3 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html" target="_blank" rel="noopener">java.util.Iterator</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Enumeration.html" target="_blank" rel="noopener">java.util.Enumeration</a></li></ul><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 百宝箱包含一组魔法物品。有多种物品，例如戒指，药水和武器。可以使用藏宝箱提供的迭代器按类型浏览物品。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreasureChest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Item&gt; items;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreasureChest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        items = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> Item(ItemType.POTION, <span class="string">"Potion of courage"</span>),</span><br><span class="line">                <span class="keyword">new</span> Item(ItemType.RING, <span class="string">"Ring of shadows"</span>),</span><br><span class="line">                <span class="keyword">new</span> Item(ItemType.POTION, <span class="string">"Potion of wisdom"</span>),</span><br><span class="line">                <span class="keyword">new</span> Item(ItemType.POTION, <span class="string">"Potion of blood"</span>),</span><br><span class="line">                <span class="keyword">new</span> Item(ItemType.WEAPON, <span class="string">"Sword of silver"</span>),</span><br><span class="line">                <span class="keyword">new</span> Item(ItemType.POTION, <span class="string">"Potion of rust"</span>),</span><br><span class="line">                <span class="keyword">new</span> Item(ItemType.POTION, <span class="string">"Potion of healing"</span>),</span><br><span class="line">                <span class="keyword">new</span> Item(ItemType.RING, <span class="string">"Ring of armor"</span>),</span><br><span class="line">                <span class="keyword">new</span> Item(ItemType.WEAPON, <span class="string">"Steel halberd"</span>),</span><br><span class="line">                <span class="keyword">new</span> Item(ItemType.WEAPON, <span class="string">"Dagger of poison"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Item&gt; <span class="title">getItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(items);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">(ItemType itemType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TreasureChestItemIterator(<span class="keyword">this</span>, itemType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ItemType type;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Item</span><span class="params">(ItemType type, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setType(type);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ItemType <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(ItemType type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> ItemType &#123;</span><br><span class="line"></span><br><span class="line">    ANY, WEAPON, RING, POTION</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreasureChestItemIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TreasureChest treasureChest;</span><br><span class="line">    <span class="keyword">private</span> ItemType itemType;</span><br><span class="line">    <span class="keyword">private</span> Item[] items;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cursor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreasureChestItemIterator</span><span class="params">(TreasureChest treasureChest, ItemType itemType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.treasureChest = treasureChest;</span><br><span class="line">        <span class="keyword">this</span>.itemType = itemType;</span><br><span class="line">        <span class="keyword">this</span>.items = treasureChest.getItems().stream()</span><br><span class="line">                .filter(i -&gt; ItemType.ANY.equals(itemType) || i.getType().equals(itemType))</span><br><span class="line">                .collect(Collectors.toList())</span><br><span class="line">                .toArray(<span class="keyword">new</span> Item[]&#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (items.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cursor &gt;= <span class="number">0</span> &amp;&amp; cursor &lt; items.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = cursor;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= items.length) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> items[cursor++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="">示例代码</a></p></blockquote><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><img src="/blog/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/iterator_demo.png" class="">]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;迭代器模式&quot;&gt;&lt;a href=&quot;#迭代器模式&quot; class=&quot;headerlink&quot; title=&quot;迭代器模式&quot;&gt;&lt;/a&gt;迭代器模式&lt;/h2&gt;&lt;h3 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot; title=&quot;意图&quot;&gt;&lt;/a&gt;意图&lt;/h3&gt;&lt;p&gt;提供一种方法顺序访问一个聚合对象中的各种元素，而又不暴露该对象的内部表示。&lt;/p&gt;
&lt;h3 id=&quot;适用场景&quot;&gt;&lt;a href=&quot;#适用场景&quot; class=&quot;headerlink&quot; title=&quot;适用场景&quot;&gt;&lt;/a&gt;适用场景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;访问一个聚合对象的内容而无需暴露它的内部表示。&lt;/li&gt;
&lt;li&gt;支持对聚合对象的多种遍历。&lt;/li&gt;
&lt;li&gt;为遍历不同的聚合结构提供一个统一的接口。&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://xiaojiaC.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="迭代器模式" scheme="http://xiaojiaC.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="design patterns" scheme="http://xiaojiaC.github.io/blog/tags/design-patterns/"/>
    
      <category term="gof" scheme="http://xiaojiaC.github.io/blog/tags/gof/"/>
    
      <category term="behavioral" scheme="http://xiaojiaC.github.io/blog/tags/behavioral/"/>
    
      <category term="iterator" scheme="http://xiaojiaC.github.io/blog/tags/iterator/"/>
    
  </entry>
  
  <entry>
    <title>适配器模式</title>
    <link href="http://xiaojiac.github.io/blog/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://xiaojiac.github.io/blog/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.html</id>
    <published>2023-10-15T11:53:13.000Z</published>
    <updated>2023-12-29T07:52:06.636Z</updated>
    
    <content type="html"><![CDATA[<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><h3 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h3><p>将一个接口转换成另一个客户所期望的接口。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>需要使用一个已有类，但是它的接口不能和你需要的所匹配。</li><li>需要使用一些现有的子类，但是子类化他们每一个的子类来进行接口的适配是不现实的。一个对象适配器可以适配他们父类的接口。</li><li>需要使用适配器作为一个在应用和第三方类库间的中间层来使应用和类库解耦。</li><li>……</li></ul><a id="more"></a><h3 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h3><ul><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#list-java.util.Enumeration-" target="_blank" rel="noopener">java.util.Collections#list()</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#enumeration-java.util.Collection-" target="_blank" rel="noopener">java.util.Collections#enumeration()</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/bind/annotation/adapters/XmlAdapter.html#marshal-BoundType-" target="_blank" rel="noopener">javax.xml.bind.annotation.adapters.XMLAdapter</a></li><li><a href="https://docs.spring.io/spring-framework/docs/5.3.29/javadoc-api/org/springframework/web/servlet/HandlerAdapter.html" target="_blank" rel="noopener">Spring HandlerAdapter</a></li><li><a href="https://netty.io/4.1/api/io/netty/channel/ChannelHandlerAdapter.html" target="_blank" rel="noopener">Netty ChannelHandlerAdapter</a></li><li>电源适配器</li></ul><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 充电器将生活中220V交流电适配为5V直流电为手机充电。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IVoltage5V</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Voltage220V</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output220V</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> src = <span class="number">220</span>;</span><br><span class="line">        System.out.println(String.format(<span class="string">"输出电压: %sV"</span>, src));</span><br><span class="line">        <span class="keyword">return</span> src;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类适配器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VoltageClassAdapter</span> <span class="keyword">extends</span> <span class="title">Voltage220V</span> <span class="keyword">implements</span> <span class="title">IVoltage5V</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> srcV = output220V(); <span class="comment">// 源电压</span></span><br><span class="line">        <span class="keyword">int</span> dstV = srcV / <span class="number">44</span> ;  <span class="comment">// 降压适配</span></span><br><span class="line">        <span class="keyword">return</span> dstV;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象适配器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VoltageObjectAdapter</span> <span class="keyword">implements</span> <span class="title">IVoltage5V</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Voltage220V voltage220V;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VoltageObjectAdapter</span><span class="params">(Voltage220V voltage220V)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.voltage220V = voltage220V;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> srcV = voltage220V.output220V();</span><br><span class="line">        <span class="keyword">int</span> dstV = srcV / <span class="number">44</span>;</span><br><span class="line">        <span class="keyword">return</span> dstV;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">charging</span><span class="params">(IVoltage5V iVoltage5V)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> output = iVoltage5V.output5V();</span><br><span class="line">        <span class="keyword">if</span>(output == <span class="number">5</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"电压为5V, 可以充电~~"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"电压不为5V, 不能充电~~"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="">示例代码</a></p></blockquote><h4 id="类适配器"><a href="#类适配器" class="headerlink" title="类适配器"></a>类适配器</h4><ul><li>适配被适配者到目标接口，需要保证只有一个具体的被适配者类。</li><li>可以让适配器重写一些被适配者的行为，因为适配器是被适配者的子类。</li><li>只引入了一个对象，并且不需要其他指针间接访问被适配者。</li></ul><h4 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h4><ul><li>一个适配器可以和许多被适配者工作，也就是被适配者自己和所有它的子类。适配器同时可以为所有被适配者添加功能。</li><li>覆盖被适配者的行为变得更难。需要子类化被适配者然后让适配器引用这个子类不是被适配者。</li></ul><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><img src="/blog/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/class_adapter.png" class=""><img src="/blog/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/object_adapter.png" class="">]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;适配器模式&quot;&gt;&lt;a href=&quot;#适配器模式&quot; class=&quot;headerlink&quot; title=&quot;适配器模式&quot;&gt;&lt;/a&gt;适配器模式&lt;/h2&gt;&lt;h3 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot; title=&quot;意图&quot;&gt;&lt;/a&gt;意图&lt;/h3&gt;&lt;p&gt;将一个接口转换成另一个客户所期望的接口。&lt;/p&gt;
&lt;h3 id=&quot;适用场景&quot;&gt;&lt;a href=&quot;#适用场景&quot; class=&quot;headerlink&quot; title=&quot;适用场景&quot;&gt;&lt;/a&gt;适用场景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;需要使用一个已有类，但是它的接口不能和你需要的所匹配。&lt;/li&gt;
&lt;li&gt;需要使用一些现有的子类，但是子类化他们每一个的子类来进行接口的适配是不现实的。一个对象适配器可以适配他们父类的接口。&lt;/li&gt;
&lt;li&gt;需要使用适配器作为一个在应用和第三方类库间的中间层来使应用和类库解耦。&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://xiaojiaC.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="适配器模式" scheme="http://xiaojiaC.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="design patterns" scheme="http://xiaojiaC.github.io/blog/tags/design-patterns/"/>
    
      <category term="gof" scheme="http://xiaojiaC.github.io/blog/tags/gof/"/>
    
      <category term="structural" scheme="http://xiaojiaC.github.io/blog/tags/structural/"/>
    
      <category term="adapter" scheme="http://xiaojiaC.github.io/blog/tags/adapter/"/>
    
  </entry>
  
  <entry>
    <title>状态模式</title>
    <link href="http://xiaojiac.github.io/blog/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://xiaojiac.github.io/blog/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F.html</id>
    <published>2023-10-15T11:23:06.000Z</published>
    <updated>2023-12-29T07:52:06.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><h3 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h3><p>允许对象在内部状态改变时改变它的行为，这个对象看起来像是修改了它的类。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>对象的行为取决于它的状态，并且它必须在运行时根据状态更改其行为。</li><li>根据对象状态的不同，操作有大量的条件语句。可用该模式把条件语句的分支分别放入单独的类中。这样你就可以将对象的状态视为独立的对象，该对象可以独立于其他对象而变化。</li><li>……</li></ul><a id="more"></a><h3 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h3><ul><li><a href="https://docs.spring.io/spring-statemachine/docs/3.1.0/reference/#developing-your-first-spring-statemachine-application" target="_blank" rel="noopener">Spring State Machine</a></li></ul><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 糖果售卖机，在"投了25分钱"的状态下"转动曲柄"，会售出糖果；而在"没有25分钱"的状态下"转动曲柄"会提示请先投币。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 投币</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">insertQuarter</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退币</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">ejectQuarter</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转动出糖曲轴</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">turnCrank</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发糖</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">dispense</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退还硬币</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">returnQuarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"退币。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoQuarterState</span> <span class="keyword">extends</span> <span class="title">State</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    GumballMachine gumballMachine;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NoQuarterState</span><span class="params">(GumballMachine gumballMachine)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gumballMachine = gumballMachine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertQuarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"你投入了一个硬币"</span>);</span><br><span class="line">        <span class="comment">// 转换为有硬币状态</span></span><br><span class="line">        gumballMachine.setState(gumballMachine.hasQuarterState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ejectQuarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"没有硬币，无法弹出"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnCrank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"请先投币"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispense</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"没有投币，无法发放糖果"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HasQuarterState</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    GumballMachine gumballMachine;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HasQuarterState</span><span class="params">(GumballMachine gumballMachine)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gumballMachine = gumballMachine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertQuarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"请不要重复投币！"</span>);</span><br><span class="line">        returnQuarter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ejectQuarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        returnQuarter();</span><br><span class="line">        gumballMachine.setState(gumballMachine.noQuarterState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnCrank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"转动曲轴，准备发糖"</span>);</span><br><span class="line">        gumballMachine.setState(gumballMachine.soldState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispense</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"this method don't support"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SoldState</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    GumballMachine gumballMachine;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SoldState</span><span class="params">(GumballMachine gumballMachine)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gumballMachine = gumballMachine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertQuarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"已投币，请等待糖果"</span>);</span><br><span class="line">        returnQuarter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ejectQuarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"无法退币，正在发放糖果，请等待"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnCrank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"已按过曲轴，请等待"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispense</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> candyCount = gumballMachine.getCandyCount();</span><br><span class="line">        <span class="keyword">if</span> (candyCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"分发一颗糖果"</span>);</span><br><span class="line">            candyCount--;</span><br><span class="line">            gumballMachine.setCandyCount(candyCount);</span><br><span class="line">            <span class="keyword">if</span> (candyCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                gumballMachine.setState(gumballMachine.noQuarterState);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Oh，糖果已售罄..."</span>);</span><br><span class="line">        gumballMachine.setState(gumballMachine.soldOutState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SoldOutState</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    GumballMachine gumballMachine;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SoldOutState</span><span class="params">(GumballMachine gumballMachine)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gumballMachine = gumballMachine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertQuarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"糖果已经售罄"</span>);</span><br><span class="line">        returnQuarter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ejectQuarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"没有投币，无法退币"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnCrank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"糖果已经售罄"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispense</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"糖果已经售罄"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GumballMachine</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> State noQuarterState = <span class="keyword">new</span> NoQuarterState(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">public</span> State hasQuarterState = <span class="keyword">new</span> HasQuarterState(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">public</span> State soldState = <span class="keyword">new</span> SoldState(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">public</span> State soldOutState = <span class="keyword">new</span> SoldOutState(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> candyCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> State state = soldOutState;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GumballMachine</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.candyCount = count;</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            setState(noQuarterState);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertQuarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        state.insertQuarter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ejectQuarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        state.ejectQuarter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnCrank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        state.turnCrank();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispense</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        state.dispense();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCandyCount</span><span class="params">(<span class="keyword">int</span> candyCount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.candyCount = candyCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCandyCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> candyCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="">示例代码</a></p></blockquote><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><img src="/blog/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/state_demo.png" class=""><img src="/blog/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/state.png" class=""><p>类图中主要包含三个核心角色：</p><p>上下文角色（<code>Context</code>）：定义客户端需要的接口，维护一个当前状态，并将与状态相关的操作委托给当前状态对象来处理。<br>抽象状态角色（<code>State</code>）：定义一个接口，用以封装上下文对象中的特定状态所对应的行为。<br>具体状态角色（<code>ConcreteState</code>）：实现抽象状态所对应的行为，并且在需要的情况下进行状态切换。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;状态模式&quot;&gt;&lt;a href=&quot;#状态模式&quot; class=&quot;headerlink&quot; title=&quot;状态模式&quot;&gt;&lt;/a&gt;状态模式&lt;/h2&gt;&lt;h3 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot; title=&quot;意图&quot;&gt;&lt;/a&gt;意图&lt;/h3&gt;&lt;p&gt;允许对象在内部状态改变时改变它的行为，这个对象看起来像是修改了它的类。&lt;/p&gt;
&lt;h3 id=&quot;适用场景&quot;&gt;&lt;a href=&quot;#适用场景&quot; class=&quot;headerlink&quot; title=&quot;适用场景&quot;&gt;&lt;/a&gt;适用场景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;对象的行为取决于它的状态，并且它必须在运行时根据状态更改其行为。&lt;/li&gt;
&lt;li&gt;根据对象状态的不同，操作有大量的条件语句。可用该模式把条件语句的分支分别放入单独的类中。这样你就可以将对象的状态视为独立的对象，该对象可以独立于其他对象而变化。&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://xiaojiaC.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="状态模式" scheme="http://xiaojiaC.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="design patterns" scheme="http://xiaojiaC.github.io/blog/tags/design-patterns/"/>
    
      <category term="gof" scheme="http://xiaojiaC.github.io/blog/tags/gof/"/>
    
      <category term="behavioral" scheme="http://xiaojiaC.github.io/blog/tags/behavioral/"/>
    
      <category term="state" scheme="http://xiaojiaC.github.io/blog/tags/state/"/>
    
  </entry>
  
  <entry>
    <title>策略模式</title>
    <link href="http://xiaojiac.github.io/blog/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://xiaojiac.github.io/blog/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html</id>
    <published>2023-09-21T14:11:06.000Z</published>
    <updated>2023-12-29T07:52:06.624Z</updated>
    
    <content type="html"><![CDATA[<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><h3 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h3><p>定义一个算法族，并将每个算法封装起来，使它们可以互相替换。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>需要在运行时自由选择最匹配的算法。</li><li>需要使用一个算法的不同变体。</li><li>需要避免暴露复杂的特定于算法的规则。</li><li>需要避免多重条件语句嵌套。</li><li>……</li></ul><a id="more"></a><h3 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h3><ul><li><a href="https://docs.spring.io/spring-framework/docs/5.3.29/javadoc-api/org/springframework/web/accept/ContentNegotiationStrategy.html" target="_blank" rel="noopener">Spring ContentNegotiationStrategy</a></li><li>排序算法</li></ul><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 屠龙是一项危险的职业。有经验将会使它变得简单。经验丰富的屠龙者对不同类型的龙有不同的战斗策略。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DragonSlayingStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MeleeStrategy</span> <span class="keyword">implements</span> <span class="title">DragonSlayingStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"用神剑切断这条龙的头部!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProjectileStrategy</span> <span class="keyword">implements</span> <span class="title">DragonSlayingStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"向龙投掷魔法弩!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpellStrategy</span> <span class="keyword">implements</span> <span class="title">DragonSlayingStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"念念有词，对龙念咒语中!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DragonSlayer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DragonSlayingStrategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DragonSlayer</span><span class="params">(DragonSlayingStrategy strategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeStrategy</span><span class="params">(DragonSlayingStrategy strategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goToBattle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        strategy.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="">示例代码</a></p></blockquote><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><img src="/blog/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/strategy_demo.png" class=""><img src="/blog/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/strategy.png" class=""><p>类图中主要包含三个核心角色：</p><p>抽象策略角色（<code>Strategy</code>）：规定策略或算法的行为。<br>具体策略角色（<code>ConcreteStrategy</code>）：具体的策略或算法实现。<br>上下文角色（<code>Context</code>）：用来操作策略的上下文，屏蔽高层模块(客户端)对策略、算法的直接访问，封装可能存在的变化。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;策略模式&quot;&gt;&lt;a href=&quot;#策略模式&quot; class=&quot;headerlink&quot; title=&quot;策略模式&quot;&gt;&lt;/a&gt;策略模式&lt;/h2&gt;&lt;h3 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot; title=&quot;意图&quot;&gt;&lt;/a&gt;意图&lt;/h3&gt;&lt;p&gt;定义一个算法族，并将每个算法封装起来，使它们可以互相替换。&lt;/p&gt;
&lt;h3 id=&quot;适用场景&quot;&gt;&lt;a href=&quot;#适用场景&quot; class=&quot;headerlink&quot; title=&quot;适用场景&quot;&gt;&lt;/a&gt;适用场景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;需要在运行时自由选择最匹配的算法。&lt;/li&gt;
&lt;li&gt;需要使用一个算法的不同变体。&lt;/li&gt;
&lt;li&gt;需要避免暴露复杂的特定于算法的规则。&lt;/li&gt;
&lt;li&gt;需要避免多重条件语句嵌套。&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://xiaojiaC.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="策略模式" scheme="http://xiaojiaC.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="design patterns" scheme="http://xiaojiaC.github.io/blog/tags/design-patterns/"/>
    
      <category term="gof" scheme="http://xiaojiaC.github.io/blog/tags/gof/"/>
    
      <category term="behavioral" scheme="http://xiaojiaC.github.io/blog/tags/behavioral/"/>
    
      <category term="strategy" scheme="http://xiaojiaC.github.io/blog/tags/strategy/"/>
    
  </entry>
  
</feed>
